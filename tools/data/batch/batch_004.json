{
  "link aggregation": {
    "eli5": "It’s like using two or more garden hoses together to water faster—more links mean more bandwidth.",
    "boss": "Link Aggregation combines multiple network connections to increase throughput and provide redundancy.",
    "sysadmin": "Link Aggregation (IEEE 802.3ad / LACP) allows bundling of multiple physical network interfaces into one logical interface for higher bandwidth and failover support.",
    "emoji": "🔗🌐🚀",
    "categories": ["Networking"],
    "related": ["nic teaming", "vlan", "aggregation switch", "ethernet"],
    "aliases": [],
    "use_case": "Configuring link aggregation on a server with two NICs to double the bandwidth to a switch.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "nic teaming": {
    "eli5": "It’s like having a backup driver in case the first one gets tired—NIC teaming lets network cards work together or take over if one fails.",
    "boss": "NIC Teaming groups multiple network interfaces for better performance and reliability.",
    "sysadmin": "NIC Teaming aggregates multiple physical NICs into one logical interface to provide load balancing and failover. Often used in Windows Server or Hyper-V environments.",
    "emoji": "👯‍♂️🖧💪",
    "categories": ["Networking", "Infrastructure"],
    "related": ["link aggregation", "macvlan", "vlan", "high availability"],
    "aliases": [],
    "use_case": "Setting up NIC teaming on a Hyper-V host for fault tolerance and increased throughput.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "macvlan": {
    "eli5": "It’s like giving each roommate their own mailbox even though they all live at the same house.",
    "boss": "MACVLAN allows multiple virtual network interfaces with unique MAC addresses on a single physical NIC.",
    "sysadmin": "MACVLAN is a Linux network driver that assigns multiple MAC addresses to one physical interface, enabling containerized or VM environments to appear as unique hosts on the network.",
    "emoji": "🏷️🖧🏠",
    "categories": ["Networking", "Containers"],
    "related": ["nic teaming", "docker", "bridge mode", "network interface card"],
    "aliases": [],
    "use_case": "Using MACVLAN to allow Docker containers to appear as separate devices on the LAN for full network access.",
    "jargon_score": 4,
    "level": "Beginner"
  },
  "pxe server": {
    "eli5": "It’s like a teacher handing out test sheets as soon as students enter the room—no books needed.",
    "boss": "A PXE server allows machines to boot over the network by delivering OS installers or boot images remotely.",
    "sysadmin": "A PXE (Preboot Execution Environment) server uses DHCP and TFTP to deliver boot files to devices during startup for network-based OS installation.",
    "emoji": "📡💻📀",
    "categories": ["Infrastructure"],
    "related": ["pxe boot", "kickstart", "preseed", "provisioning"],
    "aliases": [],
    "use_case": "Deploying a PXE server to automatically install Ubuntu on new machines in a lab via network boot.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "public cloud": {
    "eli5": "It’s like renting a storage locker in a shared facility—you don’t own the building, just your space.",
    "boss": "Public cloud platforms offer computing resources over the internet on a pay-as-you-go basis.",
    "sysadmin": "A public cloud delivers infrastructure, platforms, and software as a service over the internet, typically shared across multiple customers (multi-tenancy). Examples: AWS, Azure, GCP.",
    "emoji": "☁️🏢🌍",
    "categories": ["Cloud"],
    "related": ["private cloud", "hybrid cloud", "aws", "google cloud platform"],
    "aliases": [],
    "use_case": "Hosting a website on AWS S3 and CloudFront as part of a public cloud setup.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "private cloud": {
    "eli5": "Like owning your own house instead of renting—you control everything, but it’s all your responsibility.",
    "boss": "A private cloud is a cloud environment dedicated to a single organization, offering more control and security than public cloud.",
    "sysadmin": "Private cloud infrastructure is deployed for a single tenant and may run in on-prem data centers or hosted environments. Tools like OpenStack or VMware are common here.",
    "emoji": "🔒☁️🏠",
    "categories": ["Cloud"],
    "related": ["public cloud", "hybrid cloud", "openstack", "proxmox ve"],
    "aliases": [],
    "use_case": "Deploying a private cloud using OpenStack for a financial institution requiring full data control.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "hybrid cloud": {
    "eli5": "Like having a foot in two worlds—some stuff lives at home, some in a hotel. Hybrid cloud mixes both.",
    "boss": "Hybrid cloud connects private and public clouds to allow flexible data and workload movement across environments.",
    "sysadmin": "Hybrid cloud is a combination of public and private cloud services with orchestration between them, supporting burst workloads and legacy systems integration.",
    "emoji": "🌥️🔗🏢",
    "categories": ["Cloud"],
    "related": ["public cloud", "private cloud", "multi-cloud", "cloud nat"],
    "aliases": [],
    "use_case": "Using Azure for compute and on-prem VMware for sensitive storage in a hybrid cloud model.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "multi-cloud": {
    "eli5": "It’s like shopping at multiple stores instead of just one—you get more options and avoid relying on just one place.",
    "boss": "Multi-cloud means using services from multiple cloud providers to reduce risk, improve performance, or avoid vendor lock-in.",
    "sysadmin": "Multi-cloud strategy involves deploying workloads across multiple public cloud platforms (e.g., AWS + GCP), often using orchestration and monitoring to unify management.",
    "emoji": "☁️☁️🔄",
    "categories": ["Cloud"],
    "related": ["public cloud", "hybrid cloud", "google cloud platform", "aws"],
    "aliases": [],
    "use_case": "Running Kubernetes clusters across AWS and GCP to ensure regional resilience and cost flexibility.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "availability zone": {
    "eli5": "It’s like having multiple kitchens in one restaurant—if one breaks, the others can still serve food.",
    "boss": "Availability zones are isolated data centers within a cloud region that help ensure high availability and fault tolerance.",
    "sysadmin": "An Availability Zone (AZ) is a physically separate location within a cloud provider's region, often used for deploying redundant infrastructure across zones to avoid single points of failure.",
    "emoji": "🏬🔁📶",
    "categories": ["Cloud"],
    "related": ["public cloud", "virtual private cloud", "aws", "multi-cloud"],
    "aliases": ["az"],
    "use_case": "Distributing web servers across multiple AWS availability zones to ensure uptime during outages.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "virtual private cloud": {
    "eli5": "It’s like having a private neighborhood within a big city—you get privacy, but still use city resources.",
    "boss": "A Virtual Private Cloud (VPC) gives you an isolated network inside a public cloud for more control and security.",
    "sysadmin": "A VPC is a logically isolated network in a public cloud, allowing definition of IP ranges, subnets, routing, and security rules. It acts like a private data center in the cloud.",
    "emoji": "🏘️🔐🌩️",
    "categories": ["Cloud", "Networking"],
    "related": ["subnet", "cloud nat", "security group", "aws"],
    "aliases": ["vpc"],
    "use_case": "Creating an AWS VPC with public and private subnets to host both internet-facing and internal services.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "subnet": {
    "eli5": "It’s like assigning different hallways in a building to different departments so things stay organized.",
    "boss": "A subnet divides a larger network into smaller, manageable sections to improve performance and security.",
    "sysadmin": "A subnet is a logical subdivision of an IP network that organizes hosts and defines routing boundaries. Used for isolating workloads or applying ACLs in cloud and on-prem networks.",
    "emoji": "📐🌐📊",
    "categories": ["Networking", "Cloud"],
    "related": ["virtual private cloud", "cloud nat", "security group", "cidr"],
    "aliases": [],
    "use_case": "Creating public and private subnets in a cloud VPC to separate frontend and backend services.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "cloud nat": {
    "eli5": "Like letting people inside a house access the internet through one shared phone line.",
    "boss": "Cloud NAT lets private cloud resources access the internet without being exposed to inbound connections.",
    "sysadmin": "Cloud NAT (Network Address Translation) allows instances without external IPs to initiate outbound internet connections securely, typically in GCP or AWS.",
    "emoji": "🌐🚪🔁",
    "categories": ["Cloud", "Networking"],
    "related": ["virtual private cloud", "subnet", "nat gateway", "firewall"],
    "aliases": [],
    "use_case": "Allowing internal compute instances to reach the internet for updates using Cloud NAT in GCP.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "cloud firewall": {
    "eli5": "It’s like a bouncer checking every request before letting someone into your digital party.",
    "boss": "A cloud firewall protects cloud-based apps and services by filtering incoming and outgoing traffic.",
    "sysadmin": "Cloud firewalls are security services that enforce network policies for cloud resources. They control ingress and egress traffic using rules applied at VPC or instance level.",
    "emoji": "🔥☁️🛡️",
    "categories": ["Cloud", "Firewall"],
    "related": ["security group", "virtual private cloud", "aws", "azure"],
    "aliases": [],
    "use_case": "Restricting SSH access to only trusted IPs using a cloud firewall rule in AWS.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "iam policy": {
    "eli5": "It’s like a permission slip that says who can do what, where, and when.",
    "boss": "IAM policies define who can access cloud resources and what actions they’re allowed to perform.",
    "sysadmin": "An IAM (Identity and Access Management) policy is a JSON document defining permissions for users, roles, or groups to cloud resources using allow/deny rules.",
    "emoji": "🛂📜🔐",
    "categories": ["Identity & Access", "Cloud"],
    "related": ["security group", "aws", "azure", "iam"],
    "aliases": ["identity and access management policy"],
    "use_case": "Attaching an IAM policy to a role that allows only read access to an S3 bucket.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "security group": {
    "eli5": "It’s like a digital door list—only specific guests (IP addresses) are allowed in.",
    "boss": "Security groups are virtual firewalls that control traffic to and from cloud resources.",
    "sysadmin": "Security groups are sets of inbound and outbound firewall rules applied to cloud instances. Common in AWS and Azure to secure VMs and services.",
    "emoji": "🚪🔒🌐",
    "categories": ["Cloud", "Firewall"],
    "related": ["cloud firewall", "iam policy", "virtual private cloud", "aws"],
    "aliases": [],
    "use_case": "Creating a security group in AWS that only allows HTTPS traffic from a specific IP range.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "aws": {
    "eli5": "It’s like a giant toolbox in the sky full of digital tools for building apps and services.",
    "boss": "Amazon Web Services (AWS) is a leading cloud platform offering computing, storage, databases, networking, and more on-demand.",
    "sysadmin": "AWS provides scalable cloud infrastructure and services including EC2, S3, RDS, IAM, Lambda, and VPC, with global availability zones and APIs for automation.",
    "emoji": "🛠️☁️📦",
    "categories": ["Cloud"],
    "related": ["virtual private cloud", "iam policy", "lambda", "cloud firewall"],
    "aliases": ["amazon web services"],
    "use_case": "Using AWS EC2 to host a scalable web app with auto-scaling and load balancing.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "azure": {
    "eli5": "It’s like Microsoft’s cloud playground for businesses to build and host their apps.",
    "boss": "Microsoft Azure is a cloud platform offering services like virtual machines, databases, networking, and AI tools.",
    "sysadmin": "Azure provides IaaS, PaaS, and SaaS offerings across compute, storage, networking, and identity. It's tightly integrated with Windows Server, Active Directory, and Microsoft 365.",
    "emoji": "🔷☁️📘",
    "categories": ["Cloud"],
    "related": ["aws", "virtual private cloud", "iam policy", "cloud firewall"],
    "aliases": ["microsoft azure"],
    "use_case": "Running Windows Server workloads and Azure SQL databases as part of a hybrid cloud strategy.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "google cloud platform": {
    "eli5": "It’s like Google’s supercomputer you can rent a piece of to run your own apps.",
    "boss": "Google Cloud Platform (GCP) offers a suite of cloud services including compute, storage, databases, and AI tools.",
    "sysadmin": "GCP includes services like Compute Engine, GKE, Cloud Functions, BigQuery, and IAM. It emphasizes data analytics, ML, and containerized workloads.",
    "emoji": "🌐☁️🧠",
    "categories": ["Cloud"],
    "related": ["aws", "azure", "cloud nat", "pub/sub"],
    "aliases": ["gcp"],
    "use_case": "Deploying a Kubernetes cluster using GKE on Google Cloud to run microservices.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "oracle cloud": {
    "eli5": "It’s Oracle’s version of the cloud—focused on databases and enterprise workloads.",
    "boss": "Oracle Cloud offers cloud infrastructure and software services optimized for running enterprise apps and Oracle databases.",
    "sysadmin": "Oracle Cloud Infrastructure (OCI) delivers IaaS, PaaS, and SaaS services, with focus areas in high-performance computing, databases, and cloud-native development.",
    "emoji": "🟥🗄️☁️",
    "categories": ["Cloud"],
    "related": ["aws", "google cloud platform", "databases", "iam policy"],
    "aliases": ["oracle cloud infrastructure", "oci"],
    "use_case": "Migrating an on-prem Oracle Database to OCI for improved scalability and disaster recovery.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "digitalocean": {
    "eli5": "It’s like a cloud made for developers—simple, fast, and easy to use.",
    "boss": "DigitalOcean is a cloud provider offering affordable and developer-friendly infrastructure for deploying apps and services.",
    "sysadmin": "DigitalOcean provides VMs (droplets), managed databases, Kubernetes, and networking services with a focus on simplicity and rapid deployment.",
    "emoji": "🌊☁️💻",
    "categories": ["Cloud"],
    "related": ["linode", "aws", "gcp", "vpc"],
    "aliases": [],
    "use_case": "Spinning up a low-cost droplet to host a small business website on DigitalOcean.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "linode": {
    "eli5": "It’s like a reliable cloud server you can rent without breaking the bank.",
    "boss": "Linode is a cloud hosting provider offering virtual servers and developer tools at affordable prices.",
    "sysadmin": "Linode provides cloud infrastructure including VMs, block storage, load balancers, and Kubernetes with a focus on simplicity and pricing transparency.",
    "emoji": "🌱🖥️☁️",
    "categories": ["Cloud"],
    "related": ["digitalocean", "aws", "gcp", "vpc"],
    "aliases": [],
    "use_case": "Hosting a personal blog using WordPress on a Linode VPS with automatic backups.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "hetzner": {
    "eli5": "It’s like renting a powerful computer in Germany to run your apps, websites, or servers.",
    "boss": "Hetzner is a European cloud and hosting provider known for affordable bare-metal and virtual servers with global reach.",
    "sysadmin": "Hetzner offers cloud instances, dedicated root servers, and storage boxes. It's often used for high-performance, low-cost infrastructure hosting with support for Proxmox, Docker, and more.",
    "emoji": "🇩🇪💻☁️",
    "categories": ["Cloud"],
    "related": ["ovh", "linode", "digitalocean", "proxmox ve"],
    "aliases": [],
    "use_case": "Deploying a Proxmox cluster on Hetzner bare-metal servers for a cost-effective lab environment.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "ovh": {
    "eli5": "It’s like a giant internet warehouse in Europe where you can rent servers for your websites and apps.",
    "boss": "OVHcloud is a French hosting company offering VPS, dedicated servers, and public cloud solutions worldwide.",
    "sysadmin": "OVH provides bare-metal servers, private cloud, and public cloud services with DDoS protection and a strong presence in Europe. It's popular for both enterprise and lab usage.",
    "emoji": "🇫🇷🔌☁️",
    "categories": ["Cloud"],
    "related": ["hetzner", "scaleway", "digitalocean", "aws"],
    "aliases": ["ovhcloud"],
    "use_case": "Hosting a high-bandwidth media server on an OVH dedicated machine with unmetered traffic.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "scaleway": {
    "eli5": "It’s like a French toolbox in the cloud with cool extras like ARM servers and object storage.",
    "boss": "Scaleway is a European cloud provider offering unique compute options and storage services with a focus on simplicity.",
    "sysadmin": "Scaleway offers virtual instances, bare-metal servers, Kubernetes, and object storage with support for ARM architectures and S3-compatible APIs.",
    "emoji": "🇪🇺🧰☁️",
    "categories": ["Cloud"],
    "related": ["ovh", "hetzner", "aws", "cloud storage"],
    "aliases": [],
    "use_case": "Running a low-power ARM-based CI/CD pipeline using Scaleway’s DEV1 instances.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "faas": {
    "eli5": "It’s like pressing a button and something just happens—no need to start an engine or prepare anything.",
    "boss": "Function as a Service (FaaS) lets developers run code in the cloud without managing servers, scaling automatically as needed.",
    "sysadmin": "FaaS is a serverless computing model where functions are event-driven and run on-demand, scaling based on traffic. Examples include AWS Lambda and Google Cloud Functions.",
    "emoji": "🧠⚙️📤",
    "categories": ["Cloud"],
    "related": ["lambda", "cloud functions", "serverless", "pub/sub"],
    "aliases": ["function as a service"],
    "use_case": "Using FaaS to automatically generate image thumbnails whenever a user uploads a photo to cloud storage.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "lambda": {
    "eli5": "It’s like flipping a light switch—when an event happens, your code runs instantly without needing a whole computer.",
    "boss": "AWS Lambda runs code in response to events without the need to manage servers, ideal for automation and microservices.",
    "sysadmin": "AWS Lambda is a serverless compute service that executes code triggered by events (e.g., HTTP requests, S3 uploads) using auto-scaling, pay-per-execution pricing.",
    "emoji": "⚡☁️🧠",
    "categories": ["Cloud"],
    "related": ["faas", "cloud functions", "event bus", "aws"],
    "aliases": ["aws lambda"],
    "use_case": "Triggering a Lambda function to resize images after they're uploaded to an S3 bucket.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "queue service": {
    "eli5": "It’s like a line at the coffee shop—each task waits its turn to be served.",
    "boss": "A Queue Service handles messages between systems, ensuring they’re processed in order and not lost if one system is offline.",
    "sysadmin": "Queue services (like Amazon SQS or RabbitMQ) provide reliable, asynchronous communication by queuing messages between distributed systems.",
    "emoji": "📬⏳🧾",
    "categories": ["Cloud"],
    "related": ["pub/sub", "event bus", "cloud functions", "faas"],
    "aliases": [],
    "use_case": "Using SQS to buffer order processing events in an e-commerce app before pushing them to a worker service.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "pub/sub": {
    "eli5": "Like a group chat—you shout something out, and everyone who’s listening gets the message.",
    "boss": "Pub/Sub (publish-subscribe) lets services send messages to topics, which subscribers receive automatically in real time.",
    "sysadmin": "Pub/Sub systems decouple senders and receivers by broadcasting messages to a topic that multiple subscribers can independently consume. Common in GCP and MQTT.",
    "emoji": "📣🧏‍♂️📨",
    "categories": ["Cloud"],
    "related": ["event bus", "queue service", "cloud functions", "mqtt"],
    "aliases": ["publish-subscribe"],
    "use_case": "Using Google Pub/Sub to distribute sensor data from IoT devices to multiple processing services.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "event bus": {
    "eli5": "Like a big bulletin board—services pin up notes (events), and others check it for tasks to do.",
    "boss": "An Event Bus passes events between services so they can react in real time, enabling loosely coupled architecture.",
    "sysadmin": "An event bus (e.g., AWS EventBridge) is an architecture component that routes events from producers to consumers, enabling event-driven design across distributed systems.",
    "emoji": "🚌📢🎯",
    "categories": ["Cloud"],
    "related": ["pub/sub", "lambda", "cloud functions", "faas"],
    "aliases": [],
    "use_case": "Using AWS EventBridge to trigger a Lambda function when a new user signs up.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "ci/cd infrastructure": {
    "eli5": "Like an assembly line that builds and tests your LEGO set every time you change the design.",
    "boss": "CI/CD infrastructure automates code integration, testing, and deployment to improve software delivery speed and reliability.",
    "sysadmin": "CI/CD infrastructure includes tools and pipelines that automate building, testing, and deploying applications, often using containers and GitOps practices.",
    "emoji": "🏗️🧪🚀",
    "categories": ["DevOps"],
    "related": ["jenkins", "gitlab ci", "argo cd", "tekton"],
    "aliases": ["continuous integration continuous deployment infrastructure"],
    "use_case": "Running a Jenkins-based CI/CD pipeline that builds Docker images and deploys them to Kubernetes automatically.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "jenkins": {
    "eli5": "It’s like a robot that builds and tests your code every time you make a change.",
    "boss": "Jenkins automates software builds, tests, and deployments in development workflows.",
    "sysadmin": "Jenkins is an open-source CI/CD server used to automate application delivery pipelines via plugins, scripted jobs, and triggers.",
    "emoji": "🤖🧱🔁",
    "categories": ["DevOps"],
    "related": ["ci/cd infrastructure", "gitlab ci", "tekton", "pipeline"],
    "aliases": [],
    "use_case": "Using Jenkins to pull code from GitHub, run tests, and deploy to a staging server.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "gitlab ci": {
    "eli5": "It’s like a magic button inside GitLab that checks and delivers your code automatically.",
    "boss": "GitLab CI/CD is an integrated DevOps tool for automating builds, tests, and deployments within the GitLab ecosystem.",
    "sysadmin": "GitLab CI uses `.gitlab-ci.yml` files to define jobs and pipelines triggered by Git events, providing built-in CI/CD functionality with Docker, Kubernetes, and more.",
    "emoji": "🦊🔁🚧",
    "categories": ["DevOps"],
    "related": ["ci/cd infrastructure", "jenkins", "tekton", "pipeline"],
    "aliases": ["gitlab ci/cd"],
    "use_case": "Automating tests and deployments using GitLab CI pipelines triggered by commits to the main branch.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "circleci": {
    "eli5": "Like a digital assistant that checks your code behind the scenes before sending it out to play.",
    "boss": "CircleCI is a cloud-based CI/CD platform that helps automate software builds and deployments efficiently.",
    "sysadmin": "CircleCI provides container- and VM-based build environments with config-as-code support via `.circleci/config.yml`, integrating with GitHub, Docker, and cloud services.",
    "emoji": "⭕🛠️📦",
    "categories": ["DevOps"],
    "related": ["jenkins", "gitlab ci", "ci/cd infrastructure", "tekton"],
    "aliases": [],
    "use_case": "Running unit tests and packaging artifacts automatically using CircleCI pipelines for every pull request.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "argo cd": {
    "eli5": "It’s like a GPS that constantly checks if your app is exactly where it’s supposed to be.",
    "boss": "Argo CD is a GitOps tool for Kubernetes that ensures your cluster matches the state in your Git repo.",
    "sysadmin": "Argo CD is a declarative GitOps CD controller for Kubernetes. It pulls manifests from Git repositories and syncs them to the cluster automatically.",
    "emoji": "🧭📦🔁",
    "categories": ["DevOps", "Containers"],
    "related": ["tekton", "ci/cd infrastructure", "kubernetes", "helm"],
    "aliases": [],
    "use_case": "Using Argo CD to auto-sync Kubernetes resources from a Git repo whenever new commits are made.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "tekton": {
    "eli5": "It’s like building your own conveyor belt for code delivery using open-source LEGO blocks.",
    "boss": "Tekton is a Kubernetes-native CI/CD system for building pipelines that automate software delivery.",
    "sysadmin": "Tekton provides Kubernetes custom resources and controllers for defining CI/CD pipelines, supporting containers and GitOps workflows.",
    "emoji": "🧱🛠️🌀",
    "categories": ["DevOps", "Containers"],
    "related": ["argo cd", "jenkins", "ci/cd infrastructure", "kubernetes"],
    "aliases": [],
    "use_case": "Using Tekton to define a pipeline that builds and pushes a Docker image when code is committed.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "drone ci": {
    "eli5": "Like a drone that flies off to do coding errands whenever you push changes.",
    "boss": "Drone CI is a lightweight CI/CD system that uses containerized pipelines defined in YAML.",
    "sysadmin": "Drone CI is a container-native, Git-based CI/CD platform that runs builds in isolated Docker containers triggered by Git commits.",
    "emoji": "🚁📦🧪",
    "categories": ["DevOps"],
    "related": ["ci/cd infrastructure", "jenkins", "tekton", "gitlab ci"],
    "aliases": ["drone"],
    "use_case": "Using Drone CI to build and test Go applications in containers on every pull request.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "spinnaker": {
    "eli5": "It’s like a movie director that choreographs how and where your app goes live.",
    "boss": "Spinnaker is a multi-cloud deployment platform that manages and automates software releases.",
    "sysadmin": "Spinnaker is an open-source CD platform supporting canary, blue-green, and rolling deployments across cloud providers and Kubernetes environments.",
    "emoji": "🎬🌍🚀",
    "categories": ["DevOps"],
    "related": ["ci/cd infrastructure", "argo cd", "tekton", "deployment"],
    "aliases": [],
    "use_case": "Using Spinnaker to safely deploy microservices to Kubernetes with automated rollback on failure.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "harness": {
    "eli5": "It’s like a personal butler for your app releases—it takes care of everything with minimal fuss.",
    "boss": "Harness automates software delivery, feature flags, and infrastructure governance across environments.",
    "sysadmin": "Harness is a modern CI/CD and feature management platform that supports pipelines, cloud cost management, and automated verification of deployments.",
    "emoji": "🪢🚦📊",
    "categories": ["DevOps"],
    "related": ["spinnaker", "ci/cd infrastructure", "tekton", "feature flags"],
    "aliases": [],
    "use_case": "Using Harness to deploy a new feature rollout with built-in health checks and traffic shifting.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "security infrastructure": {
    "eli5": "It’s like putting locks, cameras, and guards all around your digital home to keep it safe.",
    "boss": "Security infrastructure refers to the tools and systems that protect IT environments from threats and unauthorized access.",
    "sysadmin": "Security infrastructure encompasses firewalls, IDS/IPS, VPNs, SIEMs, endpoint protection, and access controls used to enforce cybersecurity policies and monitoring.",
    "emoji": "🛡️🔐🧱",
    "categories": ["Security", "Infrastructure"],
    "related": ["siem", "soar", "ids", "ips"],
    "aliases": [],
    "use_case": "Implementing layered security infrastructure with IDS, firewalls, and SIEM in a corporate network.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "ids": {
    "eli5": "Like a burglar alarm that alerts you when someone’s breaking into your digital house.",
    "boss": "An Intrusion Detection System monitors traffic or logs to detect unauthorized or suspicious behavior.",
    "sysadmin": "IDS tools analyze network or system activity for signs of attacks or policy violations, often logging events or triggering alerts without taking action.",
    "emoji": "🚨🧠🖧",
    "categories": ["Security"],
    "related": ["ips", "security infrastructure", "siem", "soar"],
    "aliases": ["intrusion detection system"],
    "use_case": "Deploying Snort as an IDS to monitor suspicious activity on a corporate network.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "ips": {
    "eli5": "It’s like a security guard who not only spots the thief but stops them in their tracks.",
    "boss": "An Intrusion Prevention System blocks malicious activity in real time, unlike IDS which just alerts.",
    "sysadmin": "IPS actively blocks threats by inspecting and filtering traffic based on predefined rules, signatures, or anomaly detection—often integrated with firewalls.",
    "emoji": "🛑🕵️‍♂️🖧",
    "categories": ["Security"],
    "related": ["ids", "firewall", "security infrastructure", "siem"],
    "aliases": ["intrusion prevention system"],
    "use_case": "Using Suricata as an IPS to block port scans and known exploits at the network edge.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "siem": {
    "eli5": "It’s like a giant security dashboard that watches everything and lets you zoom in when something looks fishy.",
    "boss": "SIEM tools collect and analyze security data from across your systems to detect threats and ensure compliance.",
    "sysadmin": "Security Information and Event Management (SIEM) centralizes logs from network, apps, and devices, applying rules and correlations to identify and alert on potential threats.",
    "emoji": "📊👁️🧠",
    "categories": ["Security"],
    "related": ["soar", "ids", "ips", "security infrastructure"],
    "aliases": ["security information and event management"],
    "use_case": "Using Splunk as a SIEM to monitor firewall logs and detect brute force attacks.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "soar": {
    "eli5": "It’s like a self-driving car for security—it not only sees the danger but takes action too.",
    "boss": "SOAR platforms automate and coordinate threat detection and response workflows to reduce response times.",
    "sysadmin": "Security Orchestration, Automation, and Response (SOAR) tools integrate with SIEMs, ticketing systems, and playbooks to automatically respond to alerts with minimal human input.",
    "emoji": "🛫🤖🛡️",
    "categories": ["Security"],
    "related": ["siem", "ids", "ips", "security infrastructure"],
    "aliases": ["security orchestration automation and response"],
    "use_case": "Using a SOAR platform to automatically isolate a compromised endpoint when an alert is triggered by the SIEM.",
    "jargon_score": 4,
    "level": "Beginner"
  },
  "edr": {
    "eli5": "It’s like antivirus on steroids—it doesn’t just scan, it watches and records everything your computer does.",
    "boss": "Endpoint Detection and Response (EDR) tools monitor and investigate activities on computers to detect and respond to threats.",
    "sysadmin": "EDR provides real-time visibility into endpoint activities, combining behavioral analytics, threat detection, and forensic investigation with automated response actions.",
    "emoji": "💻🕵️‍♀️⚠️",
    "categories": ["Security"],
    "related": ["siem", "ids", "soar", "endpoint protection"],
    "aliases": ["endpoint detection and response"],
    "use_case": "Deploying CrowdStrike EDR on employee laptops to detect suspicious processes and lateral movement.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "group": {
    "eli5": "It’s like creating a club where everyone gets the same perks—add someone to the group, and they inherit the rules.",
    "boss": "Groups help manage access and permissions by bundling users together and applying roles or policies at once.",
    "sysadmin": "A group is a logical collection of users or resources used to assign common permissions, often seen in directory services like AD or IAM systems.",
    "emoji": "👥🔐🗂️",
    "categories": ["Identity & Access"],
    "related": ["iam policy", "role", "user account", "security group"],
    "aliases": [],
    "use_case": "Adding users to an 'Admins' group in Active Directory to grant elevated permissions without manual assignment.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "vault": {
    "eli5": "It’s like a super-secure digital safe where apps can store and retrieve their secrets when needed.",
    "boss": "Vault is a tool that securely stores and controls access to secrets such as API keys, passwords, and certificates.",
    "sysadmin": "HashiCorp Vault is a secrets management tool that provides encryption-as-a-service, dynamic secrets, and access control using policies and audit logging.",
    "emoji": "🔐🏦📜",
    "categories": ["Security", "Encryption"],
    "related": ["key management system", "identity provider", "mfa", "authenticator app"],
    "aliases": ["hashicorp vault"],
    "use_case": "Using Vault to dynamically generate short-lived database credentials for microservices in production.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "key management system": {
    "eli5": "It’s like a librarian who keeps track of who has the keys and when they’re allowed to use them.",
    "boss": "A Key Management System (KMS) helps manage cryptographic keys for encrypting data and controlling access securely.",
    "sysadmin": "KMS solutions handle the lifecycle of encryption keys, including generation, rotation, revocation, and access control—examples include AWS KMS and HashiCorp Vault.",
    "emoji": "🔑📦🔁",
    "categories": ["Security", "Encryption"],
    "related": ["vault", "tls termination proxy", "encryption", "identity provider"],
    "aliases": ["kms"],
    "use_case": "Using AWS KMS to encrypt files stored in S3 and manage key rotation automatically.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "tls termination proxy": {
    "eli5": "It’s like a receptionist who opens encrypted letters, reads them, and sends the info to the right person inside.",
    "boss": "A TLS Termination Proxy decrypts secure connections so internal systems can handle unencrypted traffic more efficiently.",
    "sysadmin": "A TLS Termination Proxy handles incoming HTTPS traffic by terminating the TLS connection, decrypting it, and forwarding plain HTTP to backend services—often used in load balancers and ingress controllers.",
    "emoji": "📬🔓➡️",
    "categories": ["Web Security", "Networking"],
    "related": ["loadbalancer", "reverse proxy", "encryption", "certificate"],
    "aliases": [],
    "use_case": "Using Nginx as a TLS termination proxy to offload SSL from backend servers in a Kubernetes cluster.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "jump server": {
    "eli5": "It’s like a security checkpoint that you must go through before accessing the important rooms.",
    "boss": "A jump server is a secure entry point that admins use to access devices or systems in a protected network.",
    "sysadmin": "A jump server (or jump box) is a hardened, controlled-access system used to connect to devices within a secure or segmented network zone, often via SSH or RDP.",
    "emoji": "🛂🖥️🔗",
    "categories": ["Security", "Infrastructure"],
    "related": ["bastion host", "firewall", "active directory", "ssh"],
    "aliases": ["jump box"],
    "use_case": "Using a jump server to access database servers in a private subnet of a VPC via SSH.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "bastion host": {
    "eli5": "It’s like a gatekeeper for your castle—only trusted people can go through it to get to the inside.",
    "boss": "A bastion host is a special-purpose server that allows secure access to internal resources behind a firewall.",
    "sysadmin": "A bastion host is a publicly accessible, hardened server used to connect securely to private network resources, often deployed in DMZs or cloud environments.",
    "emoji": "🛡️🏰🖧",
    "categories": ["Security", "Infrastructure"],
    "related": ["jump server", "firewall", "ssh", "vpc"],
    "aliases": [],
    "use_case": "Deploying a bastion host in AWS to manage EC2 instances in a private subnet securely.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "active directory": {
    "eli5": "It’s like a phone book that also knows everyone’s job, keys, and what doors they’re allowed through.",
    "boss": "Active Directory (AD) manages users, computers, and access to resources across a Windows-based network.",
    "sysadmin": "Active Directory is a directory service developed by Microsoft for managing identity, authentication, and authorization across domain-joined resources using LDAP and Kerberos.",
    "emoji": "📘🔑🏢",
    "categories": ["Identity & Access"],
    "related": ["sso", "saml", "mfa", "group"],
    "aliases": ["ad"],
    "use_case": "Using Active Directory to centrally manage login access and group policies across hundreds of PCs in an enterprise.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "sso": {
    "eli5": "It’s like having one key that opens all the doors you’re allowed into, instead of carrying a keychain.",
    "boss": "Single Sign-On (SSO) lets users log in once and gain access to multiple systems without re-entering credentials.",
    "sysadmin": "SSO is an authentication process that allows a user to access multiple applications with one login, often implemented using SAML or OIDC with an identity provider.",
    "emoji": "🔐🪪🚪",
    "categories": ["Identity & Access"],
    "related": ["saml", "active directory", "identity provider", "mfa"],
    "aliases": ["single sign-on"],
    "use_case": "Using SSO so employees can access Microsoft 365, Zoom, and Salesforce with a single login.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "saml": {
    "eli5": "It’s like a permission slip written in XML that one school gives to another to let you in.",
    "boss": "SAML is a protocol that lets one system confirm your identity to another so you don’t have to log in twice.",
    "sysadmin": "Security Assertion Markup Language (SAML) is an XML-based protocol used for exchanging authentication and authorization data between identity providers and service providers.",
    "emoji": "📜🔗🧾",
    "categories": ["Identity & Access"],
    "related": ["sso", "identity provider", "mfa", "active directory"],
    "aliases": ["security assertion markup language"],
    "use_case": "Using SAML for SSO between Okta and an internal HR portal so users don’t need separate logins.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "mfa": {
    "eli5": "It’s like needing both a password and a fingerprint to get into your phone—it adds another layer of safety.",
    "boss": "Multi-Factor Authentication (MFA) requires users to provide two or more verification methods to increase account security.",
    "sysadmin": "MFA strengthens authentication by requiring additional verification factors such as OTP codes, biometrics, or hardware tokens, beyond username and password.",
    "emoji": "🧑‍💻🔒📲",
    "categories": ["Security", "Identity & Access"],
    "related": ["sso", "authenticator app", "identity provider", "active directory"],
    "aliases": ["multi-factor authentication"],
    "use_case": "Enabling MFA for remote access to corporate VPN using a password and a code from an app.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "identity provider": {
    "eli5": "It’s like a bouncer who checks your ID before letting you into the party.",
    "boss": "An Identity Provider (IdP) is a service that authenticates users and tells other systems who they are.",
    "sysadmin": "An Identity Provider handles authentication and identity management, issuing tokens or assertions to service providers. Examples include Okta, Azure AD, and Auth0.",
    "emoji": "🪪🌐🔐",
    "categories": ["Identity & Access"],
    "related": ["sso", "saml", "authenticator app", "vault"],
    "aliases": ["idp"],
    "use_case": "Using Okta as an identity provider to control access to company apps and enforce MFA.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "authenticator app": {
    "eli5": "It’s like a special app on your phone that gives you one-time codes to unlock things safely.",
    "boss": "An authenticator app generates temporary codes for verifying user identity during login, often used in MFA setups.",
    "sysadmin": "Authenticator apps (like Google Authenticator or Authy) generate TOTP-based one-time passwords used as a second factor in MFA systems.",
    "emoji": "📱🔢🧾",
    "categories": ["Security", "Identity & Access"],
    "related": ["mfa", "identity provider", "sso", "vault"],
    "aliases": [],
    "use_case": "Using Microsoft Authenticator to generate login codes for cloud admin portals with MFA enabled.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "dns infrastructure": {
    "eli5": "It’s the giant phonebook of the internet that helps computers find each other.",
    "boss": "DNS Infrastructure translates domain names into IP addresses so users can access websites and services.",
    "sysadmin": "DNS infrastructure includes authoritative and recursive DNS servers, zones, records, and protocols that resolve names into IPs to direct traffic efficiently and securely.",
    "emoji": "🌐📖📡",
    "categories": ["Networking", "Networking Protocols"],
    "related": ["bind9", "unbound", "coredns", "dnsmasq"],
    "aliases": [],
    "use_case": "Deploying redundant DNS infrastructure with Unbound and PowerDNS to ensure high availability in a datacenter.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "bind9": {
    "eli5": "It’s like a librarian that answers name-to-number lookups for everyone on the internet.",
    "boss": "BIND9 is a widely used open-source DNS server that manages domain records and provides name resolution.",
    "sysadmin": "BIND9 (Berkeley Internet Name Domain) is a full-featured DNS server for hosting authoritative zones and recursive queries with support for DNSSEC, views, and ACLs.",
    "emoji": "📘🧠🌐",
    "categories": ["Networking", "Networking Protocols"],
    "related": ["dns infrastructure", "dnsmasq", "unbound", "coredns"],
    "aliases": ["bind"],
    "use_case": "Using BIND9 to host authoritative DNS zones for an enterprise domain with internal and external views.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "coredns": {
    "eli5": "It’s like a smart directory that helps apps find each other inside a container neighborhood.",
    "boss": "CoreDNS is a DNS server optimized for containerized environments like Kubernetes.",
    "sysadmin": "CoreDNS is a DNS server written in Go that’s modular and used by default in Kubernetes clusters to resolve internal service names.",
    "emoji": "📦🔍🗂️",
    "categories": ["Networking", "Containers"],
    "related": ["dns infrastructure", "kubernetes", "dnsmasq", "bind9"],
    "aliases": [],
    "use_case": "Using CoreDNS in a Kubernetes cluster to resolve pod and service names dynamically.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "dnsmasq": {
    "eli5": "It’s like a tiny helper that knows both phonebook and house rules—fast and simple.",
    "boss": "dnsmasq provides lightweight DNS and DHCP services, often used on routers and local networks.",
    "sysadmin": "dnsmasq is a lightweight DNS forwarder and DHCP server for small networks, often used in embedded systems or local development environments.",
    "emoji": "📗📡🏠",
    "categories": ["Networking", "Networking Protocols"],
    "related": ["bind9", "unbound", "dns infrastructure", "dhcp server"],
    "aliases": [],
    "use_case": "Running dnsmasq on a Raspberry Pi to handle DHCP and local DNS for a home lab.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "unbound": {
    "eli5": "It’s like a fast lookup clerk that keeps a fresh copy of your favorite addresses handy.",
    "boss": "Unbound is a validating, recursive DNS resolver that improves privacy and speeds up domain resolution.",
    "sysadmin": "Unbound is a DNS resolver focused on performance, DNSSEC validation, and security. It’s commonly used in combination with ad blockers like Pi-hole or AdGuard Home.",
    "emoji": "📚🔐⚡",
    "categories": ["Networking", "Networking Protocols"],
    "related": ["dnsmasq", "bind9", "powerdns", "dns infrastructure"],
    "aliases": [],
    "use_case": "Using Unbound with AdGuard Home to resolve DNS privately and block trackers in a home network.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "powerdns": {
    "eli5": "It’s like a professional switchboard operator that handles calls for many different numbers quickly and securely.",
    "boss": "PowerDNS is a flexible DNS server that supports modern features like DNSSEC, APIs, and integration with databases.",
    "sysadmin": "PowerDNS is an open-source DNS server suite with authoritative and recursive modes, supporting backends like MySQL and LDAP, plus robust DNSSEC and RESTful API support.",
    "emoji": "🔌📞🔐",
    "categories": ["Networking", "Networking Protocols"],
    "related": ["bind9", "unbound", "dns infrastructure", "dns server"],
    "aliases": [],
    "use_case": "Deploying PowerDNS with a MySQL backend to serve dynamic DNS records for a SaaS platform.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "split horizon dns": {
    "eli5": "It’s like showing one map to visitors and a different one to family—each sees only what they need.",
    "boss": "Split Horizon DNS returns different DNS records based on where the request comes from—inside or outside the network.",
    "sysadmin": "Split Horizon DNS is a configuration that serves different DNS responses depending on the source of the query. It’s used for internal vs external resolution of domains.",
    "emoji": "🧭🔀🏡🌐",
    "categories": ["Networking", "Networking Protocols"],
    "related": ["bind9", "dns infrastructure", "firewall", "unbound"],
    "aliases": [],
    "use_case": "Using Split Horizon DNS to direct internal users to a private IP and external users to a public IP for the same domain.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "dns forwarder": {
    "eli5": "It’s like asking a friend who knows someone smarter to get the right answer for you.",
    "boss": "A DNS forwarder sends DNS queries to another DNS server instead of resolving them directly, often used for caching or filtering.",
    "sysadmin": "A DNS forwarder is a server that relays DNS queries it receives to upstream DNS servers, commonly used in local networks or to apply custom rules or ad-blocking.",
    "emoji": "🔄🌐📨",
    "categories": ["Networking", "Networking Protocols"],
    "related": ["dns infrastructure", "unbound", "dnsmasq", "firewall"],
    "aliases": [],
    "use_case": "Configuring Unbound as a DNS forwarder to send all queries to Cloudflare's 1.1.1.1 resolver.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "anycast dns": {
    "eli5": "It’s like yelling your question into a crowd and whoever’s closest to you answers.",
    "boss": "Anycast DNS routes user queries to the closest server, improving speed and reliability of DNS responses.",
    "sysadmin": "Anycast DNS uses the same IP address across multiple servers in different locations. BGP directs queries to the nearest server based on network topology.",
    "emoji": "📣🗺️⚡",
    "categories": ["Networking", "Networking Protocols"],
    "related": ["dns infrastructure", "cloudflare", "powerdns", "dns"],
    "aliases": [],
    "use_case": "Using Cloudflare’s Anycast DNS to deliver fast and resilient domain resolution across the globe.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "deployment strategies": {
    "eli5": "It’s like choosing whether to replace all the cookies at once or swap them out one-by-one to test the new recipe.",
    "boss": "Deployment strategies help teams release updates to software safely by controlling when and how changes go live.",
    "sysadmin": "Deployment strategies define methods for rolling out application updates, such as all-at-once (recreate), rolling, blue-green, or canary to minimize downtime and risk.",
    "emoji": "🚀📦📊",
    "categories": ["DevOps"],
    "related": ["blue-green deployment", "canary deployment", "rolling update", "immutable infrastructure"],
    "aliases": [],
    "use_case": "Using a canary deployment strategy to release a new feature to 5% of users before full rollout.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "blue-green deployment": {
    "eli5": "It’s like having two kitchens—one cooking now, the other testing the new recipe. You switch when ready.",
    "boss": "Blue-Green Deployment uses two identical environments, so you can switch traffic from old to new with minimal risk.",
    "sysadmin": "Blue-green deployments run two production environments (blue and green); traffic is switched to the new one after validation, reducing downtime and rollback complexity.",
    "emoji": "🔵🟢🔁",
    "categories": ["DevOps"],
    "related": ["deployment strategies", "canary deployment", "rolling update", "immutable infrastructure"],
    "aliases": [],
    "use_case": "Using blue-green deployments to update a web app without downtime by swapping routes to the new environment.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "canary deployment": {
    "eli5": "It’s like letting just one bird fly into the mine first to see if it’s safe before the rest follow.",
    "boss": "Canary deployment gradually releases updates to a small group of users first, to catch problems early.",
    "sysadmin": "Canary deployment delivers changes to a small subset of servers or users before scaling to the entire infrastructure, helping validate stability and performance.",
    "emoji": "🐤⚙️📈",
    "categories": ["DevOps"],
    "related": ["blue-green deployment", "deployment strategies", "rolling update", "feature flags"],
    "aliases": [],
    "use_case": "Deploying a new API version to 10% of users to monitor performance before expanding to everyone.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "rolling update": {
    "eli5": "It’s like changing tires on a moving bus—one at a time so it doesn’t stop completely.",
    "boss": "Rolling updates let you update apps one piece at a time to avoid downtime and reduce risk.",
    "sysadmin": "A rolling update replaces old instances of an app with new ones in phases, ensuring continuous availability and rollback capability if issues occur.",
    "emoji": "🔄🧱🧰",
    "categories": ["DevOps"],
    "related": ["deployment strategies", "blue-green deployment", "canary deployment", "kubernetes"],
    "aliases": [],
    "use_case": "Using Kubernetes rolling updates to upgrade a deployment without taking the service offline.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "immutable infrastructure": {
    "eli5": "It’s like throwing away your old phone and using a new one every time you need an update—never patching in place.",
    "boss": "Immutable infrastructure avoids configuration drift by replacing systems entirely instead of updating them.",
    "sysadmin": "With immutable infrastructure, once a system is deployed, it’s never modified directly. Updates are made by provisioning new instances with the updated configuration or software.",
    "emoji": "🧱🚫🔧",
    "categories": ["Infrastructure", "DevOps"],
    "related": ["deployment strategies", "rolling update", "cloud-init", "drift detection"],
    "aliases": [],
    "use_case": "Using Packer and Terraform to deploy immutable virtual machines that get rebuilt and replaced on every change.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "replication": {
    "eli5": "It’s like making a backup buddy who always stays updated so you’re never alone if something goes wrong.",
    "boss": "Replication copies data or services across systems to improve reliability, performance, and disaster recovery.",
    "sysadmin": "Replication is the process of synchronizing data between systems or databases, either in real-time or on a schedule. It’s key for high availability, failover, and load distribution.",
    "emoji": "📄🔁🧭",
    "categories": ["Infrastructure", "Storage"],
    "related": ["failover", "dr site", "immutable infrastructure", "cold storage"],
    "aliases": [],
    "use_case": "Setting up real-time database replication from a primary data center to a secondary site for disaster recovery.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "failover": {
    "eli5": "It’s like having a spare tire ready—if one goes flat, the other takes over instantly.",
    "boss": "Failover ensures that if one system fails, another takes over to keep operations running smoothly.",
    "sysadmin": "Failover is a high-availability strategy that switches operations to a standby system or network if the primary one becomes unavailable, minimizing downtime.",
    "emoji": "🔁🚨🖥️",
    "categories": ["Infrastructure", "Backup"],
    "related": ["replication", "dr site", "high availability", "load balancer"],
    "aliases": [],
    "use_case": "Configuring failover between two DNS servers so one handles queries if the other goes offline.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "dr site": {
    "eli5": "It’s like having a second home ready in case something happens to your first one.",
    "boss": "A Disaster Recovery (DR) site is a backup location where systems can be restored and run during an emergency.",
    "sysadmin": "A DR site is a secondary location equipped with infrastructure and data replicas that can take over if the primary site is compromised or fails.",
    "emoji": "🏚️➡️🏠💾",
    "categories": ["Backup", "Infrastructure"],
    "related": ["failover", "replication", "cold storage", "air-gapped backup"],
    "aliases": ["disaster recovery site"],
    "use_case": "Activating a cloud-based DR site to recover services during a datacenter outage.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "cold storage": {
    "eli5": "It’s like putting your old photos in the attic—not gone, just not easy to grab right away.",
    "boss": "Cold storage holds data that you don’t need to access often but still want to keep for the future.",
    "sysadmin": "Cold storage refers to archival systems that store infrequently accessed data, such as backups or compliance logs, usually on cheaper, slower media like tape or cold cloud storage.",
    "emoji": "❄️📦🗃️",
    "categories": ["Storage", "Backup"],
    "related": ["air-gapped backup", "dr site", "veeam", "archival"],
    "aliases": [],
    "use_case": "Storing monthly database snapshots in Amazon Glacier as cold storage for compliance.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "air-gapped backup": {
    "eli5": "It’s like hiding your money under the mattress—offline and untouchable by thieves.",
    "boss": "Air-gapped backups are stored offline, disconnected from networks, to protect against cyberattacks like ransomware.",
    "sysadmin": "An air-gapped backup is a copy of data stored on media or devices that are completely isolated from any network, minimizing the risk of corruption or compromise.",
    "emoji": "🛑🔌💾",
    "categories": ["Backup", "Security"],
    "related": ["cold storage", "veeam", "dr site", "immutable infrastructure"],
    "aliases": [],
    "use_case": "Using tape drives to store weekly air-gapped backups in a secure offsite facility.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "veeam": {
    "eli5": "It’s like a super-organized librarian who keeps track of everything and can restore books fast if they’re lost.",
    "boss": "Veeam is a data protection and backup platform for virtual, physical, and cloud environments.",
    "sysadmin": "Veeam provides backup, replication, and disaster recovery solutions, especially for VMware, Hyper-V, and cloud workloads, with features like incremental backup, immutability, and instant recovery.",
    "emoji": "🗃️🔁🛠️",
    "categories": ["Backup", "Infrastructure"],
    "related": ["air-gapped backup", "dr site", "cold storage", "replication"],
    "aliases": [],
    "use_case": "Using Veeam to schedule daily backups of VMware VMs and replicate them to a DR site.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "edge infrastructure": {
    "eli5": "It’s like putting a mini grocery store closer to your house so you don’t have to drive far for snacks.",
    "boss": "Edge infrastructure moves computing closer to users to reduce latency and improve performance.",
    "sysadmin": "Edge infrastructure refers to IT resources deployed near the source of data generation (e.g., IoT devices or users), reducing the need to send all data to centralized cloud systems.",
    "emoji": "📦🏠⚡",
    "categories": ["Infrastructure", "IoT"],
    "related": ["edge compute", "cdn", "iot gateway", "remote site deployment"],
    "aliases": [],
    "use_case": "Deploying edge servers at retail branches to process customer analytics data locally.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "content delivery network": {
    "eli5": "It’s like having snack stations all around the world so everyone gets their chips fast, no matter where they are.",
    "boss": "A CDN stores and delivers website content from servers closer to the end user to improve load times and reliability.",
    "sysadmin": "A Content Delivery Network is a distributed server system that caches web content at edge locations to speed up delivery, reduce bandwidth, and mitigate DDoS attacks.",
    "emoji": "🌍🚚📡",
    "categories": ["Web", "Infrastructure"],
    "related": ["edge infrastructure", "fastly compute@edge", "web server", "dns"],
    "aliases": ["cdn"],
    "use_case": "Using Cloudflare CDN to cache images and JavaScript for a global audience.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "edge compute": {
    "eli5": "It’s like having a mini brain close to where you need decisions, instead of always calling the main office.",
    "boss": "Edge computing processes data near its source to improve speed, reduce latency, and save bandwidth.",
    "sysadmin": "Edge compute refers to processing data at or near the data source (e.g., IoT devices), instead of relying on a central cloud, enabling real-time actions and reducing backhaul.",
    "emoji": "🧠🌐⚡",
    "categories": ["IoT", "Infrastructure"],
    "related": ["edge infrastructure", "iot gateway", "remote site deployment", "cdn"],
    "aliases": ["edge computing"],
    "use_case": "Analyzing traffic camera footage locally using edge compute to detect license plates in real time.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "fastly compute@edge": {
    "eli5": "It’s like giving vending machines the brains to cook snacks on-demand near you, instantly.",
    "boss": "Fastly Compute@Edge is a platform that runs serverless functions close to users to deliver dynamic content quickly.",
    "sysadmin": "Compute@Edge is Fastly’s serverless platform that runs WebAssembly-based code at edge nodes, enabling ultra-low-latency processing like personalization and API handling.",
    "emoji": "⚙️🌎📡",
    "categories": ["Web", "Edge Infrastructure"],
    "related": ["edge compute", "cdn", "serverless", "cloud functions"],
    "aliases": [],
    "use_case": "Using Fastly Compute@Edge to personalize website content in real time at global edge locations.",
    "jargon_score": 4,
    "level": "Beginner"
  },
  "iot gateway": {
    "eli5": "It’s like a translator that helps smart gadgets talk to the internet.",
    "boss": "An IoT Gateway connects local smart devices to the cloud or backend systems, translating protocols and securing communication.",
    "sysadmin": "An IoT Gateway bridges the gap between IoT devices and data centers or cloud, handling data aggregation, filtering, protocol translation (e.g., MQTT, Modbus), and security.",
    "emoji": "📡🔄🏠",
    "categories": ["IoT", "Infrastructure"],
    "related": ["edge compute", "edge infrastructure", "mqtt", "remote site deployment"],
    "aliases": [],
    "use_case": "Using an IoT gateway to connect Zigbee-based sensors to a cloud dashboard via MQTT.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "remote site deployment": {
    "eli5": "It’s like setting up a mini office in another town that still connects to your company HQ.",
    "boss": "Remote site deployment refers to rolling out infrastructure or applications to branch offices or distributed locations.",
    "sysadmin": "Remote site deployment involves provisioning and configuring systems (servers, apps, IoT) outside the main data center, often using automation tools like Ansible or cloud-based orchestration.",
    "emoji": "🌐🏢📦",
    "categories": ["Infrastructure", "Automation"],
    "related": ["edge infrastructure", "iot gateway", "ansible", "provisioning"],
    "aliases": [],
    "use_case": "Using Ansible to deploy firewall and monitoring tools to retail store locations automatically.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "time synchronization": {
    "eli5": "It’s like making sure all your clocks agree on the same time so no one’s late or early.",
    "boss": "Time synchronization ensures that all systems in a network agree on the same time, which is crucial for security, logging, and communication.",
    "sysadmin": "Time synchronization aligns the clocks of devices and systems using protocols like NTP or PTP to avoid drift that can break authentication, logging, or coordination between nodes.",
    "emoji": "⏰🔗🕒",
    "categories": ["Infrastructure"],
    "related": ["chrony", "ntpd", "ptp", "time drift"],
    "aliases": [],
    "use_case": "Using Chrony to synchronize time across servers in a Kubernetes cluster.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "chrony": {
    "eli5": "It’s like a really smart clock fixer that adjusts your time without making big jumps.",
    "boss": "Chrony is a time synchronization tool for Linux that’s more accurate and reliable than older tools like ntpd.",
    "sysadmin": "Chrony is an NTP client/server for modern Linux systems, designed for systems with intermittent network connections or unstable clocks, offering faster sync and smaller drift.",
    "emoji": "🕰️📡🔧",
    "categories": ["Infrastructure"],
    "related": ["ntpd", "time synchronization", "ptp", "time drift"],
    "aliases": [],
    "use_case": "Using Chrony to keep time accurate on a Linux server that frequently enters sleep mode.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "ptp": {
    "eli5": "It’s like syncing watches down to the millisecond for a group race—every step matters.",
    "boss": "PTP (Precision Time Protocol) is used to synchronize clocks in systems where exact timing is critical, like telecom or trading.",
    "sysadmin": "PTP (IEEE 1588) is a protocol used for precise time synchronization across devices on a local network, often in applications needing sub-microsecond accuracy.",
    "emoji": "🎯⏱️🧭",
    "categories": ["Infrastructure"],
    "related": ["time synchronization", "chrony", "ntpd", "time drift"],
    "aliases": ["precision time protocol"],
    "use_case": "Deploying PTP in a financial trading network to ensure time-stamped logs are synchronized to the millisecond.",
    "jargon_score": 4,
    "level": "Beginner"
  },
  "time drift": {
    "eli5": "It’s like your watch slowly running too fast or too slow over time without you noticing.",
    "boss": "Time drift happens when system clocks slowly become inaccurate, which can cause issues with logs, security, or coordination.",
    "sysadmin": "Time drift is the gradual deviation of a system’s internal clock from the correct time, often corrected using NTP or PTP to maintain consistency across distributed systems.",
    "emoji": "⏳🕰️❗",
    "categories": ["Infrastructure"],
    "related": ["chrony", "ntpd", "ptp", "time synchronization"],
    "aliases": [],
    "use_case": "Monitoring time drift on IoT devices to avoid logging issues and sync failures.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "ntpd": {
    "eli5": "It’s like an old but reliable friend who helps you set your watch by listening to a radio station.",
    "boss": "ntpd is a service that keeps your computer’s clock in sync with global time servers.",
    "sysadmin": "ntpd is the Network Time Protocol daemon used for syncing system time across networks. It supports long-term accuracy and has been a standard on Unix systems for decades.",
    "emoji": "⏲️🌐🔗",
    "categories": ["Infrastructure"],
    "related": ["chrony", "time synchronization", "ptp", "time drift"],
    "aliases": ["network time protocol daemon"],
    "use_case": "Running ntpd on a legacy Linux server to keep logs in sync with other systems.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "cmdb": {
    "eli5": "It’s like a digital catalog that knows every item in your toolbox and what it’s used for.",
    "boss": "A Configuration Management Database (CMDB) keeps a record of all IT assets, their relationships, and configurations.",
    "sysadmin": "A CMDB is a repository that stores configuration items (CIs) such as servers, software, and network devices, enabling change management and IT operations insights.",
    "emoji": "📚🧱🔍",
    "categories": ["Configuration Management", "Infrastructure"],
    "related": ["asset tagging", "inventory tracking", "license server", "automation"],
    "aliases": ["configuration management database"],
    "use_case": "Using a CMDB to track servers and their dependencies during a data center migration.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "asset tagging": {
    "eli5": "It’s like putting name labels on your stuff so you don’t lose track of who owns what.",
    "boss": "Asset tagging labels IT equipment with unique identifiers to track inventory and ownership.",
    "sysadmin": "Asset tagging involves applying physical or digital labels to devices for tracking, auditing, and lifecycle management within IT environments.",
    "emoji": "🏷️💻📋",
    "categories": ["Infrastructure"],
    "related": ["cmdb", "inventory tracking", "license server", "hardware"],
    "aliases": [],
    "use_case": "Using barcode tags to manage laptops and desktops across departments for IT audits.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "inventory tracking": {
    "eli5": "It’s like a big checklist that helps you know what tools you have and where they are.",
    "boss": "Inventory tracking monitors IT assets and their statuses for better planning and management.",
    "sysadmin": "Inventory tracking refers to the process of recording, updating, and managing IT assets—software and hardware—using tools like CMDBs or asset management platforms.",
    "emoji": "📦📊🔎",
    "categories": ["Infrastructure"],
    "related": ["asset tagging", "cmdb", "license server", "automation"],
    "aliases": [],
    "use_case": "Using SCCM to track which computers have Microsoft Office installed across an organization.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "license server": {
    "eli5": "It’s like a teacher who checks if each student has permission to use a schoolbook before letting them read.",
    "boss": "A license server centrally manages and verifies software licenses across an organization.",
    "sysadmin": "License servers control and monitor access to software based on licensing models, often for applications like Microsoft RDS, Autodesk, or MATLAB.",
    "emoji": "🔑🧾🖥️",
    "categories": ["Infrastructure"],
    "related": ["inventory tracking", "cmdb", "asset tagging", "user account"],
    "aliases": [],
    "use_case": "Deploying a license server to manage and track usage of AutoCAD licenses within an engineering firm.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "/mnt": {
    "eli5": "It’s like a special closet where you temporarily attach someone else’s storage box to look inside.",
    "boss": "/mnt is a standard folder in Linux where external drives or filesystems are temporarily mounted.",
    "sysadmin": "/mnt is a mount point in Linux used for attaching filesystems like USB drives, remote shares, or partitions, often for temporary access or manual mounts.",
    "emoji": "📂📎💾",
    "categories": ["Filesystems", "Operating Systems"],
    "related": ["mount", "fstab", "linux", "external hard drive"],
    "aliases": [],
    "use_case": "Mounting an external USB drive to /mnt/usb for copying backup files on a Linux server.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "spla": {
    "eli5": "It’s like renting software every month instead of buying it outright.",
    "boss": "SPLA (Services Provider License Agreement) allows hosting providers to rent Microsoft software on a monthly basis.",
    "sysadmin": "SPLA is a Microsoft licensing model that enables service providers to offer hosted Microsoft software (like Windows Server or SQL) to customers on a subscription basis.",
    "emoji": "📄💻📦",
    "categories": ["Infrastructure"],
    "related": ["oem license", "license server", "cmdb", "infrastructure roles"],
    "aliases": ["services provider license agreement"],
    "use_case": "Using SPLA to legally offer hosted Microsoft SQL Server to clients in a managed data center.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "oem license": {
    "eli5": "It’s like buying a toy that comes with batteries you can't move to another toy.",
    "boss": "An OEM license is tied to a specific device and can’t be transferred, often pre-installed by manufacturers.",
    "sysadmin": "OEM (Original Equipment Manufacturer) licenses are software licenses that are pre-activated on specific hardware and are non-transferable, common for Windows OS on laptops and desktops.",
    "emoji": "🖥️🔒📑",
    "categories": ["Infrastructure"],
    "related": ["spla", "license server", "cmdb", "asset tagging"],
    "aliases": ["original equipment manufacturer license"],
    "use_case": "Activating Windows on a prebuilt PC using the OEM license that came with the hardware.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "power & cooling": {
    "eli5": "It’s like keeping your game console from overheating by using a fan and plugging it into a stable outlet.",
    "boss": "Power & Cooling ensures servers stay running and don’t overheat in data centers or IT rooms.",
    "sysadmin": "Power & Cooling refers to the electrical and thermal infrastructure required to support IT equipment, including UPS systems, PDU distribution, HVAC, and airflow planning.",
    "emoji": "🔌🌬️💻",
    "categories": ["Infrastructure"],
    "related": ["redundant psu", "data center cooling", "fan controller", "thermal envelope"],
    "aliases": [],
    "use_case": "Designing a server room with redundant power and precision cooling to maintain equipment uptime.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "redundant psu": {
    "eli5": "It’s like having two power cords for your computer so it keeps running if one gets pulled out.",
    "boss": "A Redundant Power Supply Unit (PSU) provides backup power to critical systems in case one PSU fails.",
    "sysadmin": "Redundant PSUs are dual or multi-unit power supplies in servers or networking gear that allow for continuous operation during PSU failure or maintenance.",
    "emoji": "🔋🔁⚡",
    "categories": ["Infrastructure"],
    "related": ["power & cooling", "hot aisle / cold aisle", "rack cooling", "data center technician"],
    "aliases": ["redundant power supply"],
    "use_case": "Installing redundant PSUs in a production server to ensure no downtime if a single power circuit fails.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "power budget": {
    "eli5": "It’s like making sure your circuit breaker doesn’t trip when you plug in too many things.",
    "boss": "Power budget planning helps ensure your IT setup doesn’t draw more power than the environment can handle.",
    "sysadmin": "A power budget calculates the total electrical load of IT equipment to ensure it stays within safe capacity limits of circuits, PDUs, and cooling infrastructure.",
    "emoji": "📊⚡🧮",
    "categories": ["Infrastructure"],
    "related": ["power & cooling", "redundant psu", "smart pdu", "rack cooling"],
    "aliases": [],
    "use_case": "Calculating the power budget for a server rack to avoid overloading the PDU during peak operations.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "thermal envelope": {
    "eli5": "It’s like knowing how hot your room can get before your ice cream melts.",
    "boss": "The thermal envelope defines the acceptable temperature range your IT equipment can operate within.",
    "sysadmin": "A thermal envelope is the environmental temperature and humidity range in which IT equipment operates safely. Managing it prevents overheating and extends hardware life.",
    "emoji": "🌡️📏🔒",
    "categories": ["Infrastructure"],
    "related": ["data center cooling", "hot aisle / cold aisle", "fan controller", "environment sensor"],
    "aliases": [],
    "use_case": "Monitoring the thermal envelope to adjust HVAC cooling based on rack heat output.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "hot aisle / cold aisle": {
    "eli5": "It’s like putting radiators on one side and air conditioners on the other to manage airflow.",
    "boss": "Hot and cold aisle design improves airflow and energy efficiency in data centers.",
    "sysadmin": "Hot aisle / cold aisle is a data center layout strategy where server fronts face cold aisles and backs face hot aisles, allowing better airflow containment and cooling.",
    "emoji": "🔥❄️🗃️",
    "categories": ["Infrastructure"],
    "related": ["thermal envelope", "data center cooling", "rack cooling", "power & cooling"],
    "aliases": ["hot aisle cold aisle"],
    "use_case": "Reconfiguring rack orientation to follow hot aisle / cold aisle layout for improved cooling efficiency.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "data center cooling": {
    "eli5": "It’s like installing big fans and AC units to stop your computers from turning into ovens.",
    "boss": "Data center cooling manages heat from servers to keep systems running reliably and prevent shutdowns.",
    "sysadmin": "Data center cooling includes HVAC systems, raised floors, containment strategies, and liquid cooling to maintain optimal temperatures for IT hardware.",
    "emoji": "🌬️🏢❄️",
    "categories": ["Infrastructure"],
    "related": ["hot aisle / cold aisle", "thermal envelope", "rack cooling", "fan controller"],
    "aliases": [],
    "use_case": "Installing precision cooling units in a high-density server room to prevent thermal throttling.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "rack cooling": {
    "eli5": "It’s like giving each row of computers its own mini air conditioner.",
    "boss": "Rack cooling targets airflow and temperature control at the server rack level to prevent overheating.",
    "sysadmin": "Rack cooling refers to cooling techniques that target individual server racks, such as in-rack AC units or rear-door heat exchangers, to manage high-density deployments.",
    "emoji": "🗄️❄️🔁",
    "categories": ["Infrastructure"],
    "related": ["data center cooling", "fan controller", "smart pdu", "thermal envelope"],
    "aliases": [],
    "use_case": "Deploying rack-mounted cooling doors in a high-performance computing cluster to reduce rack temperature.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "fan controller": {
    "eli5": "It’s like a thermostat that tells fans when to turn on and how fast to spin.",
    "boss": "Fan controllers regulate cooling fans to balance temperature and energy efficiency.",
    "sysadmin": "A fan controller monitors temperatures and adjusts fan speeds accordingly in servers, racks, or enclosures to optimize airflow and minimize noise or energy usage.",
    "emoji": "🎛️🌪️📉",
    "categories": ["Infrastructure"],
    "related": ["rack cooling", "data center cooling", "thermal envelope", "environment sensor"],
    "aliases": [],
    "use_case": "Using a fan controller in a rack to dynamically adjust cooling as hardware load increases.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "environment sensor": {
    "eli5": "It’s like a nose and thermometer for your server closet that keeps track of the air.",
    "boss": "Environment sensors monitor data center conditions like temperature, humidity, and airflow.",
    "sysadmin": "Environmental sensors collect real-time metrics (e.g., temp, humidity, airflow) and alert IT teams when conditions exceed safe thresholds to prevent outages or damage.",
    "emoji": "📈🌡️💨",
    "categories": ["Infrastructure"],
    "related": ["fan controller", "environmental monitoring", "smart pdu", "thermal envelope"],
    "aliases": [],
    "use_case": "Deploying sensors to alert staff if server room temperature exceeds safe limits during a cooling failure.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "environmental monitoring": {
    "eli5": "It’s like a smart weather station for your server room that watches for anything going wrong.",
    "boss": "Environmental monitoring helps protect IT equipment by tracking temperature, humidity, airflow, and power conditions.",
    "sysadmin": "Environmental monitoring involves using sensors and software to track and alert on environmental factors affecting IT infrastructure, helping ensure uptime and compliance.",
    "emoji": "🛰️🌬️🔔",
    "categories": ["Infrastructure"],
    "related": ["environment sensor", "fan controller", "smart pdu", "data center cooling"],
    "aliases": [],
    "use_case": "Setting up environmental monitoring software to detect water leaks and temperature spikes in a data center.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "smart pdu": {
    "eli5": "It’s like a fancy power strip that tells you how much electricity each device is using.",
    "boss": "A Smart PDU (Power Distribution Unit) provides power to equipment while tracking usage and enabling remote control.",
    "sysadmin": "Smart PDUs monitor and manage power distribution in racks, offering per-outlet metering, remote on/off control, and environmental input like temperature and humidity.",
    "emoji": "🔌📊🌡️",
    "categories": ["Infrastructure"],
    "related": ["rack cooling", "environmental monitoring", "power budget", "license server"],
    "aliases": ["intelligent pdu"],
    "use_case": "Using smart PDUs in racks to remotely cycle power to unresponsive equipment and log energy consumption.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "power meter": {
    "eli5": "It’s like a speedometer for electricity—it tells you how much juice your gear is using.",
    "boss": "A power meter measures electrical usage for monitoring costs and managing capacity.",
    "sysadmin": "Power meters track power consumption at the circuit, rack, or device level, helping IT teams monitor capacity, reduce waste, and plan upgrades.",
    "emoji": "⚡📉🔍",
    "categories": ["Infrastructure"],
    "related": ["smart pdu", "power budget", "environmental monitoring", "license server"],
    "aliases": [],
    "use_case": "Installing a power meter to measure total load on a rack before deploying new servers.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "airflow sensor": {
    "eli5": "It’s like a tiny wind meter that checks if your fans are actually blowing air.",
    "boss": "Airflow sensors detect cooling airflow in racks to ensure proper circulation and prevent overheating.",
    "sysadmin": "An airflow sensor measures the velocity and presence of air moving through server racks or vents, alerting when airflow drops below thresholds.",
    "emoji": "💨📏🚨",
    "categories": ["Infrastructure"],
    "related": ["fan controller", "environment sensor", "data center cooling", "thermal envelope"],
    "aliases": [],
    "use_case": "Adding airflow sensors to monitor blocked vents in high-density server enclosures.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "infrastructure roles": {
    "eli5": "It’s like different players on a sports team—each person has a job that keeps the game going.",
    "boss": "Infrastructure roles describe different positions in IT that manage networks, servers, storage, and cloud systems.",
    "sysadmin": "Infrastructure roles include technical positions like network engineer, systems administrator, and cloud engineer who build and maintain IT systems supporting business operations.",
    "emoji": "👷‍♂️🖥️🧰",
    "categories": ["Infrastructure"],
    "related": ["infrastructure engineer", "site reliability engineer", "devops engineer", "platform engineer"],
    "aliases": [],
    "use_case": "Hiring multiple infrastructure roles to support a company’s hybrid cloud migration.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "infrastructure engineer": {
    "eli5": "It’s the person who keeps all the computer roads and bridges working so everyone can get where they need to go.",
    "boss": "An Infrastructure Engineer builds and maintains the systems and networks that keep business tech running.",
    "sysadmin": "Infrastructure Engineers design, implement, and maintain IT infrastructure including servers, networking, cloud services, and automation tools, ensuring availability and scalability.",
    "emoji": "🏗️🖧⚙️",
    "categories": ["Infrastructure"],
    "related": ["infrastructure roles", "cloud engineer", "devops engineer", "site reliability engineer"],
    "aliases": [],
    "use_case": "An infrastructure engineer deploys redundant storage and failover systems in a new data center build.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "site reliability engineer": {
    "eli5": "It’s like a mechanic who makes sure your race car (the app) runs fast and never crashes.",
    "boss": "Site Reliability Engineers (SREs) keep services reliable, scalable, and fast by blending software development and IT operations.",
    "sysadmin": "SREs focus on system reliability and uptime by using software engineering to automate infrastructure, monitor performance, manage incidents, and enforce SLAs.",
    "emoji": "🔧📈🛡️",
    "categories": ["Infrastructure", "DevOps"],
    "related": ["infrastructure engineer", "devops engineer", "platform engineer", "monitoring"],
    "aliases": ["sre"],
    "use_case": "An SRE automates failover testing and builds dashboards to track SLAs for a production service.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "systems administrator": {
    "eli5": "It’s the person who makes sure the office computers don’t crash, printers don’t jam, and emails go out on time.",
    "boss": "A Systems Administrator manages servers, users, and IT systems to keep a business running smoothly.",
    "sysadmin": "Sysadmins are responsible for maintaining and troubleshooting operating systems, user accounts, updates, backups, and monitoring in on-prem or cloud environments.",
    "emoji": "🖥️🛠️🔄",
    "categories": ["Infrastructure"],
    "related": ["infrastructure engineer", "license server", "devops engineer", "user account"],
    "aliases": ["sysadmin"],
    "use_case": "A systems administrator patches servers and resets user passwords as part of daily operations.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "devops engineer": {
    "eli5": "They’re the person who builds the bridge between the people writing code and the machines running it.",
    "boss": "DevOps Engineers streamline software delivery and infrastructure through automation, monitoring, and continuous deployment.",
    "sysadmin": "DevOps Engineers use tools like CI/CD pipelines, containers, cloud APIs, and infrastructure-as-code to build scalable, automated systems across development and operations teams.",
    "emoji": "⚙️🚀🧪",
    "categories": ["DevOps", "Infrastructure"],
    "related": ["platform engineer", "site reliability engineer", "ci/cd infrastructure", "infrastructure roles"],
    "aliases": [],
    "use_case": "A DevOps engineer automates application deployment using GitLab CI and Terraform in a hybrid cloud setup.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "cloud engineer": {
    "eli5": "It’s like a construction worker who builds stuff in the sky—but the sky is full of servers.",
    "boss": "Cloud Engineers manage services like AWS, Azure, and GCP to help businesses run in the cloud efficiently and securely.",
    "sysadmin": "Cloud Engineers design and maintain cloud infrastructure, manage cost optimization, automation, networking, and security for scalable application hosting.",
    "emoji": "☁️🛠️💼",
    "categories": ["Cloud", "Infrastructure"],
    "related": ["infrastructure engineer", "devops engineer", "platform engineer", "cloud nat"],
    "aliases": [],
    "use_case": "A cloud engineer configures AWS IAM roles, VPCs, and EC2 autoscaling groups for a SaaS product.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "network engineer": {
    "eli5": "They’re the ones making sure your Wi-Fi and cables let everything talk to each other.",
    "boss": "A Network Engineer designs and maintains reliable, secure connections between systems across LANs, WANs, and cloud.",
    "sysadmin": "Network Engineers configure routers, switches, firewalls, VPNs, and monitor network performance and availability using tools like SNMP and NetFlow.",
    "emoji": "🖧🔌🛡️",
    "categories": ["Networking", "Infrastructure"],
    "related": ["infrastructure engineer", "firewall", "vlan", "siem"],
    "aliases": [],
    "use_case": "A network engineer designs a redundant, high-speed core network for a data center using LACP and VRRP.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "platform engineer": {
    "eli5": "It’s the person who builds the train tracks so developers can ride smoothly without laying rails every time.",
    "boss": "Platform Engineers create and maintain internal tools and infrastructure that developers use to deploy apps efficiently.",
    "sysadmin": "Platform Engineers build PaaS-like environments within companies using CI/CD pipelines, Kubernetes, APIs, and developer self-service platforms with standard templates and automation.",
    "emoji": "🏗️🚂📦",
    "categories": ["DevOps", "Infrastructure"],
    "related": ["devops engineer", "site reliability engineer", "cloud engineer", "infrastructure roles"],
    "aliases": [],
    "use_case": "A platform engineer builds a developer portal for launching compliant AWS infrastructure with one click.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "storage administrator": {
    "eli5": "They’re the person making sure all your digital boxes are organized and not overflowing.",
    "boss": "A Storage Administrator manages disks, file shares, and storage arrays to keep data available and safe.",
    "sysadmin": "Storage Admins configure, monitor, and troubleshoot storage systems including SAN, NAS, RAID, and backup platforms, ensuring performance and redundancy.",
    "emoji": "💾📁🛠️",
    "categories": ["Storage", "Infrastructure"],
    "related": ["backup", "infrastructure engineer", "cmdb", "veeam"],
    "aliases": [],
    "use_case": "A storage admin sets up a ZFS pool with redundancy for a database cluster in a private cloud.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "data center technician": {
    "eli5": "It’s the person who plugs in the wires, racks the servers, and makes sure the blinking lights blink right.",
    "boss": "Data Center Technicians install, maintain, and troubleshoot physical servers and networking gear in data centers.",
    "sysadmin": "Data Center Techs handle hands-on support for server installs, cabling, hardware failures, and environment monitoring, often working closely with remote teams.",
    "emoji": "🔌🧰🖥️",
    "categories": ["Infrastructure"],
    "related": ["infrastructure roles", "rack cooling", "redundant psu", "environment sensor"],
    "aliases": [],
    "use_case": "A technician replaces a failed drive in a RAID array and verifies airflow sensors in a colocated server cabinet.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "linux": {
    "eli5": "It’s like a Lego kit for building your own computer system—flexible, powerful, and free to use.",
    "boss": "Linux is a free and open-source operating system widely used in servers, cloud, embedded systems, and desktops.",
    "sysadmin": "Linux is a Unix-like kernel and OS environment that powers servers, containers, and desktops. It's known for stability, scalability, and open-source flexibility, commonly used in enterprise and DevOps environments.",
    "emoji": "🐧💻🛠️",
    "categories": ["Operating Systems"],
    "related": ["gnu/linux", "kernel", "linux distribution", "shell"],
    "aliases": [],
    "use_case": "Running Ubuntu Linux as the base OS for a web server in AWS.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "gnu/linux": {
    "eli5": "It’s like saying the full name instead of a nickname—GNU/Linux means the whole operating system, not just the engine.",
    "boss": "GNU/Linux refers to the combination of the Linux kernel and GNU tools that make up a full operating system.",
    "sysadmin": "GNU/Linux denotes a complete OS based on the Linux kernel and GNU utilities like bash, coreutils, and gcc. It's the foundation for most Linux distributions.",
    "emoji": "📦🐧🧰",
    "categories": ["Operating Systems"],
    "related": ["linux", "kernel", "shell", "distro"],
    "aliases": ["gnu linux"],
    "use_case": "Installing a GNU/Linux distro such as Debian that includes both the Linux kernel and GNU toolchain.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "kernel": {
    "eli5": "It’s the brain that helps your apps talk to the computer’s hardware.",
    "boss": "The kernel is the core of an operating system, managing system resources and communication between hardware and software.",
    "sysadmin": "A kernel is the lowest level of an OS, controlling CPU, memory, I/O, and devices. Linux's monolithic kernel handles process scheduling, drivers, and system calls.",
    "emoji": "🧠🔧💾",
    "categories": ["Operating Systems"],
    "related": ["linux", "gnu/linux", "shell", "tty"],
    "aliases": [],
    "use_case": "Upgrading the Linux kernel to patch security vulnerabilities and improve hardware compatibility.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "linux distribution": {
    "eli5": "It’s like a flavor of ice cream—different options built on the same base ingredients.",
    "boss": "A Linux distribution (distro) bundles the Linux kernel with software and package managers tailored for specific users or use cases.",
    "sysadmin": "A Linux distribution combines the Linux kernel with userland tools, package management, and system services. Popular distros include Ubuntu, CentOS, and Arch.",
    "emoji": "🍦🐧📀",
    "categories": ["Operating Systems"],
    "related": ["distro", "linux", "lts", "minimal install"],
    "aliases": ["distro"],
    "use_case": "Installing CentOS, a Linux distribution tailored for enterprise servers.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "distro": {
    "eli5": "It’s a nickname for different versions of Linux—each with its own style and tools.",
    "boss": "‘Distro’ is short for distribution and refers to a version of Linux packaged with specific features and tools.",
    "sysadmin": "A distro is a specific flavor of Linux that packages the kernel with system utilities, desktop environments, and package managers. Examples: Debian, Fedora, Arch.",
    "emoji": "🎁🐧📦",
    "categories": ["Operating Systems"],
    "related": ["linux distribution", "linux", "lts", "rolling release"],
    "aliases": ["distribution"],
    "use_case": "Choosing a distro like Manjaro for its rolling release updates and user-friendly interface.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "lts": {
    "eli5": "It’s like a long-lasting battery—this version gets updates and support for a longer time.",
    "boss": "LTS (Long-Term Support) releases are supported longer than regular versions, making them ideal for production environments.",
    "sysadmin": "LTS releases provide extended support, security updates, and stability. Ubuntu LTS, for example, receives five years of updates, reducing maintenance overhead.",
    "emoji": "🕒🔒📦",
    "categories": ["Operating Systems"],
    "related": ["linux distribution", "ubuntu", "minimal install", "kernel"],
    "aliases": ["long-term support"],
    "use_case": "Using Ubuntu 22.04 LTS on servers to ensure long-term compatibility and security.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "rolling release": {
    "eli5": "It’s like a never-ending buffet—you get new updates all the time without waiting for the next big version.",
    "boss": "A rolling release updates continuously instead of having fixed major versions, keeping systems up to date.",
    "sysadmin": "Rolling releases provide frequent, incremental software updates without major release cycles. Common in distros like Arch or Manjaro.",
    "emoji": "🔁📦🚀",
    "categories": ["Operating Systems"],
    "related": ["distro", "linux", "manjaro", "minimal install"],
    "aliases": [],
    "use_case": "Using a rolling release distro like Arch to always run the latest kernel and packages.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "minimal install": {
    "eli5": "It’s like ordering a burger with only the patty—just the basics, so you can add what you want later.",
    "boss": "A minimal install gives you a basic system with just enough to boot and operate, letting you customize from there.",
    "sysadmin": "Minimal installs provide a lightweight OS setup with only essential components, often used for servers or containers to reduce attack surface and footprint.",
    "emoji": "🍔📉🧱",
    "categories": ["Operating Systems"],
    "related": ["lts", "ubuntu", "distro", "cloud-init"],
    "aliases": [],
    "use_case": "Deploying a minimal CentOS installation on a VPS to manually install only required services.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "ubuntu": {
    "eli5": "It’s one of the most popular flavors of Linux—friendly, stable, and easy to use.",
    "boss": "Ubuntu is a widely used Linux distribution known for its user-friendliness, LTS support, and large community.",
    "sysadmin": "Ubuntu is a Debian-based Linux distribution used in desktop, cloud, and server environments, featuring apt package management and regular LTS releases.",
    "emoji": "🧡🐧💽",
    "categories": ["Operating Systems"],
    "related": ["linux", "lts", "minimal install", "ubuntu server"],
    "aliases": [],
    "use_case": "Installing Ubuntu LTS as the base image for containerized web apps in a Kubernetes cluster.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "fedora": {
    "eli5": "It’s like the tech lab of Linux—always testing the newest gadgets and features.",
    "boss": "Fedora is a Linux distribution focused on cutting-edge software, innovation, and upstream collaboration.",
    "sysadmin": "Fedora is a community-driven Linux distro sponsored by Red Hat that includes bleeding-edge software and serves as the upstream for RHEL.",
    "emoji": "🎩🐧⚙️",
    "categories": ["Operating Systems"],
    "related": ["rhel", "linux", "distro", "rolling release"],
    "aliases": [],
    "use_case": "Using Fedora on a dev laptop to test the latest versions of GNOME and development tools.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "centos": {
    "eli5": "It used to be the steady old truck of Linux—strong, stable, and free to use for a long time.",
    "boss": "CentOS was a free, RHEL-compatible Linux distro used for production servers, now shifting to CentOS Stream.",
    "sysadmin": "CentOS was a community rebuild of Red Hat Enterprise Linux (RHEL). CentOS Stream now serves as a rolling preview for the next RHEL release.",
    "emoji": "🚛📦🐧",
    "categories": ["Operating Systems"],
    "related": ["rhel", "linux", "fedora", "lts"],
    "aliases": [],
    "use_case": "Using CentOS 7 for stable server workloads in environments mirroring RHEL.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "rhel": {
    "eli5": "It’s the big-business version of Linux that companies pay for because it comes with a safety net.",
    "boss": "RHEL (Red Hat Enterprise Linux) is a commercial Linux distribution with support, certification, and security updates.",
    "sysadmin": "RHEL is a stable, enterprise-grade Linux OS designed for production workloads, offering certified hardware/software support and lifecycle management tools.",
    "emoji": "🎓📘🛡️",
    "categories": ["Operating Systems"],
    "related": ["centos", "linux", "suse linux enterprise", "fedora"],
    "aliases": ["red hat enterprise linux"],
    "use_case": "Running RHEL on production Oracle Database servers with extended support contracts.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "suse linux enterprise": {
    "eli5": "It’s a German-engineered Linux for businesses that like things neat, secure, and supported.",
    "boss": "SUSE Linux Enterprise is a commercial Linux distro focused on enterprise use cases with strong support and certifications.",
    "sysadmin": "SUSE Linux Enterprise Server (SLES) is a hardened Linux OS with high availability, SAP optimization, and integration with SUSE Manager and other enterprise tools.",
    "emoji": "🟢🧰📦",
    "categories": ["Operating Systems"],
    "related": ["rhel", "linux", "sles", "suse"],
    "aliases": ["sles"],
    "use_case": "Deploying SUSE Linux Enterprise for SAP workloads in a regulated banking environment.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "manjaro": {
    "eli5": "It’s like Arch Linux’s friendly cousin that doesn’t make you build everything from scratch.",
    "boss": "Manjaro is a user-friendly, Arch-based rolling release Linux distro that offers modern tools and a preconfigured desktop.",
    "sysadmin": "Manjaro builds on Arch Linux with GUI installers, hardware detection, and easy package management using pacman and Pamac, maintaining a rolling release update model.",
    "emoji": "📗🐧🚀",
    "categories": ["Operating Systems"],
    "related": ["arch", "linux", "rolling release", "distro"],
    "aliases": [],
    "use_case": "Installing Manjaro on a developer laptop to use Arch features with an easier setup.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "kali linux": {
    "eli5": "It’s like a hacker’s toolbox filled with gadgets to test locks—not break them, but learn how they work.",
    "boss": "Kali Linux is a security-focused Linux distro with tools for ethical hacking, penetration testing, and forensics.",
    "sysadmin": "Kali Linux includes hundreds of pre-installed tools for penetration testing, network scanning, digital forensics, and reverse engineering—used by security pros and researchers.",
    "emoji": "💻🛡️🔍",
    "categories": ["Operating Systems", "Security"],
    "related": ["parrot os", "linux", "pentesting", "nmap"],
    "aliases": [],
    "use_case": "Running Kali Linux from a USB stick to perform wireless security audits in a corporate environment.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "parrot os": {
    "eli5": "It’s like Kali’s artsy sibling—built for hacking but also good at privacy and development.",
    "boss": "Parrot OS is a Debian-based Linux distro designed for penetration testing, security research, and privacy.",
    "sysadmin": "Parrot OS offers security-focused tools along with secure browsing and development environments. It’s often used for ethical hacking and forensic analysis.",
    "emoji": "🦜🔐💻",
    "categories": ["Operating Systems", "Security"],
    "related": ["kali linux", "linux", "distro", "pentesting"],
    "aliases": [],
    "use_case": "Using Parrot OS to run anonymous browsing sessions and perform forensic file analysis.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "linux mint": {
    "eli5": "It’s like Linux with training wheels—easy to ride and hard to fall off.",
    "boss": "Linux Mint is a beginner-friendly desktop Linux distro based on Ubuntu, designed for ease of use.",
    "sysadmin": "Linux Mint provides a familiar Windows-like interface, preinstalled multimedia codecs, and long-term support packages, ideal for home or entry-level Linux users.",
    "emoji": "🌱💻🎧",
    "categories": ["Operating Systems"],
    "related": ["ubuntu", "lts", "elementary os", "pop!_os"],
    "aliases": [],
    "use_case": "Installing Linux Mint on an old laptop for a family member switching from Windows.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "pop!_os": {
    "eli5": "It’s like a sci-fi themed Linux built for speed, smarts, and science.",
    "boss": "Pop!_OS is a Linux distro by System76 focused on productivity, developers, and scientific computing.",
    "sysadmin": "Pop!_OS is based on Ubuntu, offering an enhanced GNOME experience, tiling window manager, and great GPU support, especially for engineers and creators.",
    "emoji": "🚀🧑‍🔬🐧",
    "categories": ["Operating Systems"],
    "related": ["ubuntu", "linux", "linux mint", "elementary os"],
    "aliases": [],
    "use_case": "Running Pop!_OS on a laptop with NVIDIA GPU to do AI development and machine learning tasks.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "zorin os": {
    "eli5": "It’s like Linux dressed in a Windows outfit so you feel at home.",
    "boss": "Zorin OS is a Linux distro designed to make Windows users feel comfortable while offering Linux benefits.",
    "sysadmin": "Zorin OS provides a polished, Windows-like interface with Ubuntu under the hood. It includes Wine support, great for Linux newcomers and older hardware.",
    "emoji": "🎩🖥️🧑‍🏫",
    "categories": ["Operating Systems"],
    "related": ["linux mint", "ubuntu", "elementary os", "pop!_os"],
    "aliases": [],
    "use_case": "Installing Zorin OS on school computers to provide a familiar and fast desktop experience.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "endeavouros": {
    "eli5": "It’s like an easy way to climb the Arch Linux mountain without falling off the cliff.",
    "boss": "EndeavourOS is an Arch-based Linux distro that makes getting started with Arch easier while keeping its flexibility.",
    "sysadmin": "EndeavourOS provides a pre-configured Arch Linux setup with offline and online installers, offering a minimal and friendly starting point with full Arch compatibility.",
    "emoji": "🧗🐧🛠️",
    "categories": ["Operating Systems"],
    "related": ["manjaro", "arch", "rolling release", "linux"],
    "aliases": [],
    "use_case": "Using EndeavourOS to quickly install a clean Arch-based system with minimal bloat.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "elementary os": {
    "eli5": "It’s like macOS’s cousin that lives in the Linux world—simple, sleek, and pretty.",
    "boss": "Elementary OS is a Linux distro known for its elegant design and strong focus on privacy and simplicity.",
    "sysadmin": "Elementary OS is based on Ubuntu and uses the Pantheon desktop. It emphasizes minimalism, privacy, and user experience, ideal for casual users and creators.",
    "emoji": "🎨💻🔒",
    "categories": ["Operating Systems"],
    "related": ["zorin os", "linux mint", "ubuntu", "pop!_os"],
    "aliases": [],
    "use_case": "Installing Elementary OS on a design student’s laptop for a distraction-free, Mac-like environment.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "raspberry pi os": {
    "eli5": "It’s like a tiny computer’s favorite outfit—it fits just right and has all the basics built-in.",
    "boss": "Raspberry Pi OS is a lightweight Linux OS optimized for Raspberry Pi devices, used in education and IoT.",
    "sysadmin": "Raspberry Pi OS (formerly Raspbian) is a Debian-based OS tailored for the ARM architecture and Raspberry Pi hardware, preloaded with learning and programming tools.",
    "emoji": "🥧🖥️🔧",
    "categories": ["Operating Systems", "IoT"],
    "related": ["linux", "ubuntu", "raspberry pi", "minimal install"],
    "aliases": ["raspbian"],
    "use_case": "Using Raspberry Pi OS on a Pi to run a home automation controller or learning environment.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "shell": {
    "eli5": "It’s like talking to your computer with secret commands instead of clicking around with a mouse.",
    "boss": "A shell is a command-line interface that lets users interact with the operating system directly.",
    "sysadmin": "A shell interprets typed commands into OS actions. Common shells include bash, zsh, and fish, used for scripting, automation, and server administration.",
    "emoji": "🖥️⌨️💬",
    "categories": ["Operating Systems", "Command Line"],
    "related": ["linux", "bash", "terminal", "tty"],
    "aliases": [],
    "use_case": "Using the bash shell to automate system updates with a script on a headless server.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "vgcreate": {
    "eli5": "It’s like making a big storage bin out of smaller containers so you can organize space better.",
    "boss": "‘vgcreate’ is a Linux command used to group physical disks into a virtual storage pool.",
    "sysadmin": "`vgcreate` is part of LVM (Logical Volume Manager) in Linux, used to create a volume group from physical volumes, enabling flexible storage management.",
    "emoji": "📦🧱🔧",
    "categories": ["Operating Systems", "Filesystems"],
    "related": ["lvm", "linux", "filesystem", "shell"],
    "aliases": [],
    "use_case": "Using `vgcreate` to combine two hard drives into a single volume group on a Linux server.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "tty": {
    "eli5": "It’s like an old-school TV screen you type into—it talks back, but only in text.",
    "boss": "A TTY (teletype) is a text-based interface to the system, often used when no graphical interface is running.",
    "sysadmin": "TTY refers to virtual or physical terminal interfaces in Unix/Linux systems. Accessible via Ctrl+Alt+Fx keys, they allow direct shell access without a GUI.",
    "emoji": "📟⌨️🧑‍💻",
    "categories": ["Operating Systems", "Command Line"],
    "related": ["shell", "terminal", "linux", "bash"],
    "aliases": ["teletype"],
    "use_case": "Switching to TTY2 on a Linux machine using Ctrl+Alt+F2 for troubleshooting X11 issues.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "bash": {
    "eli5": "It’s like talking to your computer in a secret code to get it to do things for you.",
    "boss": "Bash is a command-line interface used to run scripts, manage files, and interact with the Linux operating system.",
    "sysadmin": "Bash (Bourne Again SHell) is a Unix shell and command language commonly used for scripting and interactive terminal sessions, supporting variables, conditionals, loops, and job control.",
    "emoji": "🐚💻⌨️",
    "categories": ["Command Line", "Operating Systems"],
    "related": ["shell", "zsh", "shell script", "cli"],
    "aliases": ["bourne again shell"],
    "use_case": "Writing a Bash script to automate server log rotation and cleanup.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "zsh": {
    "eli5": "It’s like Bash’s smarter cousin that finishes your sentences and looks cooler.",
    "boss": "Zsh is an enhanced shell that offers productivity features like auto-suggestions and customizable prompts.",
    "sysadmin": "Zsh (Z Shell) is a powerful Unix shell offering advanced features like command completion, spelling correction, and themeable prompts. It’s often used with Oh My Zsh.",
    "emoji": "🧠🎨⌨️",
    "categories": ["Command Line", "Operating Systems"],
    "related": ["bash", "fish", "shell", "cli"],
    "aliases": ["z shell"],
    "use_case": "Using Zsh with Oh My Zsh to enhance the command-line experience on a Mac.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "fish": {
    "eli5": "It’s like a shell that holds your hand and gives you suggestions as you type.",
    "boss": "Fish is a user-friendly shell that focuses on out-of-the-box usability and intuitive features.",
    "sysadmin": "Fish (Friendly Interactive SHell) is a modern Unix shell with syntax highlighting, autosuggestions, and a web-based configuration interface.",
    "emoji": "🐟⌨️🌈",
    "categories": ["Command Line", "Operating Systems"],
    "related": ["bash", "zsh", "shell", "cli"],
    "aliases": ["friendly interactive shell"],
    "use_case": "Installing Fish for a new developer who wants syntax highlighting and command hints in the terminal.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "sh": {
    "eli5": "It’s the original way people used to talk to computers in the old days.",
    "boss": "‘sh’ is the classic Unix shell used in early Unix systems and still used for basic scripts.",
    "sysadmin": "sh (Bourne Shell) is a standard POSIX-compliant shell used for scripting in Unix-like systems, providing basic functionality and wide compatibility.",
    "emoji": "🧓📜🖥️",
    "categories": ["Command Line", "Operating Systems"],
    "related": ["bash", "shell", "shell script", "shebang"],
    "aliases": ["bourne shell"],
    "use_case": "Writing a portable shell script in `sh` to run across many Unix variants.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "shell prompt": {
    "eli5": "It’s the blinking cursor waiting for you to tell the computer what to do.",
    "boss": "The shell prompt is where users type commands in a terminal interface.",
    "sysadmin": "The shell prompt is the interface marker (e.g., `$`, `#`) that signals readiness for user input in a terminal. It can be customized to show user, hostname, path, etc.",
    "emoji": "💬🖥️⌨️",
    "categories": ["Command Line", "Operating Systems"],
    "related": ["bash", "cli", "interactive shell", "shell"],
    "aliases": [],
    "use_case": "Customizing the shell prompt to show the current Git branch in a developer’s terminal.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "login shell": {
    "eli5": "It’s the shell that greets you right after logging in—like a butler ready to take your coat.",
    "boss": "A login shell is the first terminal session you get after signing into a Unix-like system.",
    "sysadmin": "A login shell initializes environment variables and runs config files like `.bash_profile` or `.zprofile`. It differs from non-login or interactive shells.",
    "emoji": "👤🚪🖥️",
    "categories": ["Operating Systems", "Command Line"],
    "related": ["shell", "interactive shell", "bash", "tty"],
    "aliases": [],
    "use_case": "Configuring `.bash_profile` to set environment variables during login shell sessions.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "interactive shell": {
    "eli5": "It’s like talking back and forth with your computer—you type something, it replies.",
    "boss": "An interactive shell lets you type and execute commands in real time via a terminal.",
    "sysadmin": "An interactive shell processes user input directly and supports job control, command history, and tab completion. It differs from non-interactive shells used in scripts.",
    "emoji": "🗨️🖥️⚙️",
    "categories": ["Command Line", "Operating Systems"],
    "related": ["shell", "bash", "shell prompt", "tty"],
    "aliases": [],
    "use_case": "Using an interactive shell to manually run commands on a remote server over SSH.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "shell script": {
    "eli5": "It’s like writing down a list of things for your computer to do, then telling it to run through the list.",
    "boss": "A shell script automates tasks by running a set of predefined commands in sequence.",
    "sysadmin": "Shell scripts are text files containing a series of shell commands. They automate tasks like software installation, log rotation, or backups.",
    "emoji": "📜💻⏯️",
    "categories": ["Command Line", "Scripting"],
    "related": ["bash", "cli", "shebang", "cron"],
    "aliases": [],
    "use_case": "Writing a shell script to back up a database and move it to cloud storage nightly.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "command line": {
    "eli5": "It’s like texting your computer instructions instead of clicking with a mouse.",
    "boss": "The command line is a text-based interface for running programs and managing systems.",
    "sysadmin": "The command line allows users to interact with the OS via typed commands using shells like Bash or Zsh. It’s crucial for scripting, automation, and server management.",
    "emoji": "⌨️🧾🖥️",
    "categories": ["Command Line"],
    "related": ["cli", "shell", "bash", "terminal"],
    "aliases": [],
    "use_case": "Using the command line to update packages on a Linux server.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "cli": {
    "eli5": "CLI is short for the keyboard way to control your computer, no mouse needed.",
    "boss": "CLI (Command-Line Interface) is a text-driven way to control and configure software or systems.",
    "sysadmin": "CLI tools accept input from a user via typed commands and are used in scripts, automation, and system configuration. Popular examples include `git`, `docker`, and `kubectl`.",
    "emoji": "⌨️🔧📄",
    "categories": ["Command Line"],
    "related": ["command line", "bash", "shell", "repl"],
    "aliases": ["command-line interface"],
    "use_case": "Using the AWS CLI to automate resource deployment in the cloud.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "repl": {
    "eli5": "It’s like a chatroom where you ask a question, and the computer immediately answers.",
    "boss": "REPL (Read-Eval-Print Loop) is an interactive programming environment where you enter commands and see immediate results.",
    "sysadmin": "A REPL reads user input, evaluates it, prints the result, and loops. It’s used in languages like Python (`python`), Node.js (`node`), and Bash for fast testing and exploration.",
    "emoji": "🔁💬💻",
    "categories": ["Command Line", "Programming"],
    "related": ["cli", "interactive shell", "bash", "python"],
    "aliases": ["read eval print loop"],
    "use_case": "Using the Python REPL to test code snippets before adding them to a script.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "man page": {
    "eli5": "It’s like a built-in instruction manual you can read right from your computer.",
    "boss": "A man page (manual page) is on-screen documentation for Unix/Linux commands and software.",
    "sysadmin": "Man pages are command-line manuals accessed with `man command`, offering usage, flags, examples, and config file references for Unix tools.",
    "emoji": "📘🖥️🔍",
    "categories": ["Command Line"],
    "related": ["cli", "bash", "shell", "shebang"],
    "aliases": ["manual page"],
    "use_case": "Running `man grep` to learn all the options available with the grep command.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "shebang": {
    "eli5": "It’s the line at the top of a recipe telling the chef which language to use—like ‘this is a baking recipe!’",
    "boss": "A shebang tells the system what interpreter to use to run a script file.",
    "sysadmin": "A shebang (`#!`) is the first line in scripts that specifies the interpreter path, such as `#!/bin/bash`, ensuring the script runs in the correct environment.",
    "emoji": "🚦📜🐚",
    "categories": ["Command Line", "Scripting"],
    "related": ["shell script", "bash", "sh", "man page"],
    "aliases": [],
    "use_case": "Adding `#!/bin/bash` to the top of a script to ensure it executes in the Bash shell.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "init system": {
    "eli5": "It’s the system babysitter—starts and watches over everything when your computer boots up.",
    "boss": "The init system is the first process the OS runs to start services and set up the environment.",
    "sysadmin": "An init system manages service startup, shutdown, and dependencies. Common systems include systemd, SysVinit, and Upstart.",
    "emoji": "🍼⚙️🔁",
    "categories": ["Operating Systems"],
    "related": ["systemctl", "unit file", "sysvinit", "upstart"],
    "aliases": [],
    "use_case": "Using the init system to automatically start a web server on boot.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "systemctl": {
    "eli5": "It’s the remote control for starting and stopping background programs on your computer.",
    "boss": "systemctl is the command-line tool used to manage services on systems using systemd.",
    "sysadmin": "`systemctl` is used to start, stop, restart, enable, and check the status of services managed by systemd.",
    "emoji": "🎛️🖥️⏯️",
    "categories": ["Operating Systems", "Command Line"],
    "related": ["init system", "unit file", "daemon", "sysvinit"],
    "aliases": [],
    "use_case": "Running `systemctl restart nginx` to reload a web server configuration.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "target": {
    "eli5": "It’s like choosing a playlist that tells your computer which background programs to play.",
    "boss": "A target is a systemd concept that defines a set of services or states for booting or transitioning between system modes.",
    "sysadmin": "Targets are systemd units that group other units for managing multi-user, graphical, or rescue modes. Examples: `multi-user.target`, `graphical.target`.",
    "emoji": "🎯🖥️⚙️",
    "categories": ["Operating Systems"],
    "related": ["systemctl", "unit file", "init system", "sysvinit"],
    "aliases": [],
    "use_case": "Switching to `multi-user.target` for a headless Linux server setup.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "unit file": {
    "eli5": "It’s like a set of instructions telling your computer when and how to start a background task.",
    "boss": "A unit file is a configuration file in systemd that describes a service or resource to be managed.",
    "sysadmin": "Unit files are declarative configs used by systemd to define services, timers, targets, and more. They include properties like ExecStart, Restart, and WantedBy.",
    "emoji": "📄⚙️🕹️",
    "categories": ["Operating Systems"],
    "related": ["systemctl", "init system", "target", "daemon"],
    "aliases": [],
    "use_case": "Creating a custom unit file to manage a Python script as a service on boot.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "sysvinit": {
    "eli5": "It’s the old-school way computers used to start up and run background tasks.",
    "boss": "SysVinit is an older init system used to start services in sequence during boot.",
    "sysadmin": "SysVinit uses shell scripts in `/etc/init.d/` to manage services during startup. It lacks the parallelization and features of modern systems like systemd.",
    "emoji": "📼🔧📜",
    "categories": ["Operating Systems"],
    "related": ["init system", "systemctl", "unit file", "upstart"],
    "aliases": [],
    "use_case": "Maintaining legacy servers that still use SysVinit for service management.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "upstart": {
    "eli5": "It’s like a bridge between the old and new ways of starting your computer’s services.",
    "boss": "Upstart was an event-based init system used by Ubuntu before switching to systemd.",
    "sysadmin": "Upstart handled service startup using event-driven mechanisms and replaced SysVinit in Ubuntu for a time. It’s now largely replaced by systemd.",
    "emoji": "🛤️📜⚡",
    "categories": ["Operating Systems"],
    "related": ["init system", "sysvinit", "systemctl", "unit file"],
    "aliases": [],
    "use_case": "Troubleshooting legacy Ubuntu services that still use Upstart job definitions.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "daemon": {
    "eli5": "It’s like a helpful ghost that runs in the background, quietly doing its job.",
    "boss": "A daemon is a background service that runs without user interaction, handling system tasks or apps.",
    "sysadmin": "Daemons are background processes in Unix-like systems, often started at boot, used to handle system functions like logging, printing, and networking. Commonly named with a 'd' suffix.",
    "emoji": "👻🖥️🔧",
    "categories": ["Operating Systems"],
    "related": ["init system", "systemctl", "unit file", "process"],
    "aliases": [],
    "use_case": "Configuring the SSH daemon (`sshd`) to allow secure remote login on a Linux server.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "process": {
    "eli5": "It’s like a worker doing one specific job in your computer’s factory.",
    "boss": "A process is a running instance of a program that performs tasks on a computer.",
    "sysadmin": "A process is an executing program with its own memory, environment variables, and system resources. Each process has a unique PID.",
    "emoji": "🏃‍♂️📄🔧",
    "categories": ["Operating Systems"],
    "related": ["pid", "daemon", "fork", "exec"],
    "aliases": [],
    "use_case": "Monitoring a web server process to check its memory usage and uptime.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "pid": {
    "eli5": "It’s like a number tag you give to each worker so you know who’s doing what.",
    "boss": "PID stands for Process ID, a unique number given to every running program.",
    "sysadmin": "A PID (Process Identifier) is a unique numeric ID assigned to each active process, used for tracking, monitoring, and managing system tasks.",
    "emoji": "🔢🧾🖥️",
    "categories": ["Operating Systems"],
    "related": ["process", "parent process", "kill", "top"],
    "aliases": ["process id"],
    "use_case": "Running `ps aux | grep nginx` to find the PID of the Nginx web server process.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "parent process": {
    "eli5": "It’s like the boss who hires new workers (child processes) to do parts of a job.",
    "boss": "A parent process is a program that starts another process, called its child.",
    "sysadmin": "The parent process is the process that initiates or spawns one or more child processes using a fork or exec system call. Killing the parent can affect the children.",
    "emoji": "👪🧩🔄",
    "categories": ["Operating Systems"],
    "related": ["child process", "fork", "pid", "process"],
    "aliases": [],
    "use_case": "Identifying the parent process of a script to ensure it doesn't get terminated prematurely.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "child process": {
    "eli5": "It’s the helper that your computer creates when a big job needs to be split up.",
    "boss": "A child process is a process started by another process to handle a task.",
    "sysadmin": "A child process is created by a parent process and often inherits its environment. Child processes can be monitored or managed using their PID relationships.",
    "emoji": "👶🔧🏗️",
    "categories": ["Operating Systems"],
    "related": ["parent process", "pid", "fork", "process"],
    "aliases": [],
    "use_case": "Spawning a child process from a shell script to run a backup in the background.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "fork": {
    "eli5": "It’s like cloning a worker so the clone can do something new without messing with the original.",
    "boss": "Forking is how Unix-like systems create new processes by copying an existing one.",
    "sysadmin": "`fork()` is a system call that creates a duplicate of a process. The child process receives a copy of the parent's memory and runs independently.",
    "emoji": "🍴📋👯",
    "categories": ["Operating Systems"],
    "related": ["child process", "exec", "process", "pid"],
    "aliases": [],
    "use_case": "Using `fork()` in a C program to create a new process that runs a different task.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "zombie process": {
    "eli5": "It’s like a worker who finished their job but didn’t clock out—still on the list but doing nothing.",
    "boss": "A zombie process is a completed process that remains in the system until its parent acknowledges it.",
    "sysadmin": "A zombie process is one that has finished execution but still has an entry in the process table. It occurs when the parent hasn't called `wait()` to read its exit status.",
    "emoji": "🧟‍♂️📋🧮",
    "categories": ["Operating Systems"],
    "related": ["process", "pid", "parent process", "kill"],
    "aliases": [],
    "use_case": "Monitoring a Linux server to detect zombie processes left by a crashing parent.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "kill signal": {
    "eli5": "It’s like giving a process a goodbye note—it can be polite or very forceful.",
    "boss": "A kill signal is a message sent to a process to stop or control it in some way.",
    "sysadmin": "Kill signals are instructions like SIGKILL or SIGTERM sent to processes. Use the `kill` command with signal numbers or names to terminate or control processes.",
    "emoji": "✉️💀🛑",
    "categories": ["Operating Systems", "Command Line"],
    "related": ["kill", "sigkill", "sigterm", "sigint"],
    "aliases": [],
    "use_case": "Sending SIGTERM to gracefully stop a long-running script before using SIGKILL.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "sigkill": {
    "eli5": "It’s like yanking the plug—no time for goodbyes.",
    "boss": "SIGKILL is a kill signal that forces a process to terminate immediately without cleanup.",
    "sysadmin": "SIGKILL (signal 9) is a non-catchable signal that terminates a process immediately. It cannot be ignored or handled by the process.",
    "emoji": "⚡🛑💥",
    "categories": ["Operating Systems"],
    "related": ["kill signal", "kill", "sigterm", "process"],
    "aliases": [],
    "use_case": "Using `kill -9 PID` to stop a hung process that won’t respond to normal termination.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "sigterm": {
    "eli5": "It’s like politely asking a process to wrap things up and leave.",
    "boss": "SIGTERM is a signal asking a process to terminate cleanly and gracefully.",
    "sysadmin": "SIGTERM (signal 15) allows a process to catch the signal and shut down safely. Preferred for controlled termination over SIGKILL.",
    "emoji": "🙋‍♂️🛑📦",
    "categories": ["Operating Systems"],
    "related": ["kill signal", "sigkill", "sigint", "process"],
    "aliases": [],
    "use_case": "Using `kill PID` to send SIGTERM and let a service close connections before stopping.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "sigint": {
    "eli5": "It’s like pressing Ctrl+C to stop something right now but nicely.",
    "boss": "SIGINT is an interrupt signal sent when you press Ctrl+C to stop a running process.",
    "sysadmin": "SIGINT (signal 2) is sent by terminal input like Ctrl+C. It interrupts a process, allowing it to clean up and exit if designed to handle it.",
    "emoji": "⌨️🛑🧹",
    "categories": ["Operating Systems"],
    "related": ["kill signal", "sigterm", "bash", "cli"],
    "aliases": [],
    "use_case": "Sending SIGINT with Ctrl+C to cancel a running Python script during testing.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "top": {
    "eli5": "It’s like a live scoreboard of what your computer is doing right now.",
    "boss": "Top is a terminal tool that shows real-time information about system performance and running processes.",
    "sysadmin": "`top` provides a live view of processes, CPU/memory usage, and system load. Useful for identifying performance bottlenecks.",
    "emoji": "📊🖥️📈",
    "categories": ["Command Line", "Monitoring"],
    "related": ["htop", "pid", "process", "nice value"],
    "aliases": [],
    "use_case": "Using `top` to find the process using the most CPU on a Linux server.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "htop": {
    "eli5": "It’s like top, but with colors, scrolling, and nicer controls.",
    "boss": "Htop is a user-friendly alternative to top with better visuals and navigation.",
    "sysadmin": "`htop` is an interactive process viewer that supports scrolling, filtering, mouse support, and tree views of processes.",
    "emoji": "🌈🖥️🧭",
    "categories": ["Command Line", "Monitoring"],
    "related": ["top", "pid", "nice value", "process"],
    "aliases": [],
    "use_case": "Using `htop` to send a kill signal to a memory-hogging app with one click.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "ps": {
    "eli5": "It’s like asking your computer for a list of who’s currently working.",
    "boss": "The ps command shows a snapshot of current processes running on the system.",
    "sysadmin": "`ps` (process status) displays information about active processes. Options like `aux` and `-ef` show detailed views for admins.",
    "emoji": "📋🧾🧠",
    "categories": ["Command Line"],
    "related": ["top", "pid", "kill", "process"],
    "aliases": [],
    "use_case": "Using `ps aux | grep nginx` to find the PID of a running web server.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "kill": {
    "eli5": "It’s like telling a process to stop—politely or forcefully.",
    "boss": "The kill command sends a signal to a process, usually to end it.",
    "sysadmin": "`kill` sends signals like SIGTERM or SIGKILL to processes by PID. It's a vital tool for stopping or restarting services.",
    "emoji": "🛑🎯🧨",
    "categories": ["Command Line", "Operating Systems"],
    "related": ["kill signal", "sigkill", "ps", "process"],
    "aliases": [],
    "use_case": "Running `kill 1234` to end a stuck update process.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "killall": {
    "eli5": "It’s like stopping all workers with the same name instead of looking them up one by one.",
    "boss": "killall stops all instances of a program by name rather than PID.",
    "sysadmin": "`killall` terminates all processes matching a name. Useful when you don’t want to manually track PIDs.",
    "emoji": "🎯🧹📛",
    "categories": ["Command Line", "Operating Systems"],
    "related": ["kill", "ps", "sigterm", "process"],
    "aliases": [],
    "use_case": "Using `killall chrome` to force close all Chrome browser processes.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "jobs": {
    "eli5": "It’s like checking the task list of things running in the background or paused.",
    "boss": "jobs shows background tasks running in your current terminal session.",
    "sysadmin": "`jobs` displays suspended and background jobs. Combined with `fg`, `bg`, and `kill` to manage tasks in a shell.",
    "emoji": "📋🔧🛠️",
    "categories": ["Command Line"],
    "related": ["bg", "fg", "nohup", "tmux"],
    "aliases": [],
    "use_case": "Running `jobs` to check which scripts are still running in the background of a terminal.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "bg": {
    "eli5": "It’s like telling a paused worker to keep working quietly in the back.",
    "boss": "bg resumes a suspended process and runs it in the background.",
    "sysadmin": "`bg` resumes a job paused with Ctrl+Z and continues it as a background task in the shell session.",
    "emoji": "🎬🏃‍♂️🎛️",
    "categories": ["Command Line"],
    "related": ["jobs", "fg", "nohup", "shell"],
    "aliases": [],
    "use_case": "Using `bg` to resume a download script after pressing Ctrl+Z by accident.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "fg": {
    "eli5": "It’s like bringing a worker from the back room into the spotlight to finish their task.",
    "boss": "fg moves a background task back to the foreground so you can interact with it.",
    "sysadmin": "`fg` resumes a background job and moves it to the foreground in the shell. Useful for command-line interactions or clean exits.",
    "emoji": "👓👨‍🔧🎮",
    "categories": ["Command Line"],
    "related": ["jobs", "bg", "shell", "tty"],
    "aliases": [],
    "use_case": "Typing `fg` to continue interacting with a paused bash script.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "nohup": {
    "eli5": "It’s like telling a worker to keep going even if you leave the room.",
    "boss": "nohup lets you run a command that won’t stop if you log out.",
    "sysadmin": "`nohup` ignores hangup signals, letting you run scripts or servers that persist after logout. Output is usually redirected to `nohup.out`.",
    "emoji": "📎🛡️🔁",
    "categories": ["Command Line"],
    "related": ["screen", "tmux", "jobs", "bash"],
    "aliases": [],
    "use_case": "Running `nohup python3 scraper.py &` to keep a scraper running overnight.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "screen": {
    "eli5": "It’s like opening a secret room where you can leave your work and come back later.",
    "boss": "Screen lets you run multiple terminal sessions that stay alive even if you disconnect.",
    "sysadmin": "`screen` is a terminal multiplexer that lets users create detachable sessions—ideal for long-running tasks or remote work.",
    "emoji": "🖼️🎛️🔌",
    "categories": ["Command Line", "Productivity"],
    "related": ["tmux", "nohup", "tty", "bash"],
    "aliases": [],
    "use_case": "Using `screen` to run a Minecraft server that continues after SSH logout.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "tmux": {
    "eli5": "It’s like split-screen mode for your terminal—you can run many windows at once.",
    "boss": "tmux is a terminal tool that lets you split your screen and manage multiple command-line sessions.",
    "sysadmin": "`tmux` (terminal multiplexer) supports multiple panes, session persistence, and scripting—popular for developers and sysadmins.",
    "emoji": "🧩🖥️🪟",
    "categories": ["Command Line", "Productivity"],
    "related": ["screen", "bash", "tty", "terminal"],
    "aliases": [],
    "use_case": "Using `tmux` to monitor logs and restart a service in two separate panes.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "user": {
    "eli5": "It’s the person or app logged into the computer with their own space and rules.",
    "boss": "A user is an account with permissions to access and use a system’s resources.",
    "sysadmin": "Users are defined in `/etc/passwd` and given unique IDs (UIDs). They have home directories, permissions, and belong to groups.",
    "emoji": "👤🔐🗂️",
    "categories": ["Operating Systems", "Identity & Access"],
    "related": ["uid", "gid", "root user", "sudo"],
    "aliases": [],
    "use_case": "Creating a new Linux user to isolate deployment scripts from root.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "uid": {
    "eli5": "It’s like a student ID number for each user on your computer.",
    "boss": "UID stands for User ID—a number assigned to each user account in the system.",
    "sysadmin": "UIDs uniquely identify users in the system. UID 0 is always root. Stored in `/etc/passwd`.",
    "emoji": "🆔🔢👤",
    "categories": ["Operating Systems", "Identity & Access"],
    "related": ["user", "gid", "root user", "permissions"],
    "aliases": ["user id"],
    "use_case": "Checking that a script runs with UID 1001 instead of root (UID 0).",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "gid": {
    "eli5": "It’s like a club number—everyone in the group shares some permissions.",
    "boss": "GID stands for Group ID, which links users together under common access rules.",
    "sysadmin": "GID identifies a user’s primary group in `/etc/group`. It defines shared permissions for files, processes, and commands.",
    "emoji": "👥🆔🔐",
    "categories": ["Operating Systems", "Identity & Access"],
    "related": ["uid", "user", "permissions", "sudo"],
    "aliases": ["group id"],
    "use_case": "Setting the GID on a shared folder so all group members can write to it.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "root user": {
    "eli5": "It’s like the computer’s king or queen—can do anything, anytime.",
    "boss": "The root user is the most powerful user account, with unrestricted access to everything.",
    "sysadmin": "Root (UID 0) is the superuser in Unix/Linux. It bypasses all permissions and is required for system-level tasks.",
    "emoji": "👑🛠️⚠️",
    "categories": ["Operating Systems", "Identity & Access"],
    "related": ["user", "uid", "sudo", "shell"],
    "aliases": ["superuser"],
    "use_case": "Using root to install system packages or modify protected configuration files.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "sudo": {
    "eli5": "It’s like getting a golden key that temporarily lets you do admin stuff.",
    "boss": "Sudo lets trusted users run specific commands with elevated (admin) permissions.",
    "sysadmin": "`sudo` executes commands as another user, usually root, based on rules in `/etc/sudoers`. It enables delegation of privileges without full access.",
    "emoji": "🔑🧑‍💻🚪",
    "categories": ["Operating Systems", "Identity & Access"],
    "related": ["root user", "permissions", "user", "shell"],
    "aliases": [],
    "use_case": "Running `sudo apt update` to install packages without logging in as root.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "wsl2": {
    "eli5": "It’s like running Linux inside Windows without needing a second computer.",
    "boss": "WSL2 (Windows Subsystem for Linux) lets you run a full Linux environment on Windows efficiently.",
    "sysadmin": "WSL2 uses a lightweight VM to run Linux on Windows 10/11. It supports Docker, native file systems, and kernel modules.",
    "emoji": "🪟🐧🔀",
    "categories": ["Operating Systems", "Productivity"],
    "related": ["linux", "bash", "terminal", "home directory"],
    "aliases": ["windows subsystem for linux"],
    "use_case": "Using WSL2 to develop Linux-based apps from a Windows workstation.",
    "jargon_score": 2,
    "level": "Beginner"
  },
  "home directory": {
    "eli5": "It’s your computer bedroom—where all your personal files and settings live.",
    "boss": "A home directory is where a user’s files and preferences are stored in Linux or Unix systems.",
    "sysadmin": "Each user gets a home directory like `/home/username` or `/root`. It contains dotfiles, documents, configs, and custom scripts.",
    "emoji": "🏠📁🧾",
    "categories": ["Operating Systems", "Filesystems"],
    "related": ["user", "shell", "dotfiles", "permissions"],
    "aliases": [],
    "use_case": "Accessing `.bashrc` in the home directory to customize the command prompt.",
    "jargon_score": 1,
    "level": "Beginner"
  },
  "exec": {
    "eli5": "It’s like replacing a chef mid-recipe with a new one who starts cooking something completely different using the same kitchen.",
    "boss": "Exec is a command that replaces a running process with a new program.",
    "sysadmin": "In Unix-like systems, `exec` is a system call (or shell command) that replaces the current process image with a new one, without creating a new PID. Often used in scripting for optimization.",
    "emoji": "🔄👨‍🍳💻",
    "categories": ["Operating Systems", "Command Line"],
    "related": ["fork", "shell script", "process", "pid"],
    "aliases": [],
    "use_case": "Using `exec` in a script to launch an app and completely replace the shell process.",
    "jargon_score": 3,
    "level": "Beginner"
  },
  "nice value": {
    "eli5": "It’s like deciding who gets to go first—nicer programs wait longer so others can run sooner.",
    "boss": "Nice value determines the priority of a process; higher 'nice' values mean lower priority.",
    "sysadmin": "Nice values in Unix systems range from -20 (high priority) to 19 (low priority), affecting how the CPU scheduler treats a process. Use `nice` and `renice` to adjust them.",
    "emoji": "😊📊🕒",
    "categories": ["Operating Systems"],
    "related": ["top", "htop", "process", "pid"],
    "aliases": [],
    "use_case": "Assigning a higher nice value to a backup script so it runs without slowing down more critical processes.",
    "jargon_score": 3,
    "level": "Beginner"
  }
}